apiVersion: v1
kind: ConfigMap
metadata:
  name: tiera-control-plane-config
  namespace: {{ .Values.namespace }}
data:
  configuration.properties: |-
    ###############################################
    # LOCAL EDC CONTROL PLANE CONFIG (SUPPLIER)
    ###############################################

    ###
    # Chapter General Settings
    ###

    edc.fs.config=/connector-config/configuration.properties
    edc.hostname={{ .Values.ingress.host }}
    
    edc.participant.id={{ .Values.dataspace.bpnTier1 }}
    edc.iam.issuer.id=did:web:portal-backend.int.demo.catena-x.net:api:administration:staticdata:did:{{ .Values.dataspace.bpnTier1 }}

    ###
    # Chapter Web Server / Ports
    ###

    edc.api.auth.key={{ .Values.security.xApiKey }}
    web.http.default.port=8080
    web.http.default.path=/api
    web.http.management.port=8081
    web.http.management.path=/management
    web.http.control.port=8083
    web.http.control.path=/control
    web.http.signaling.port=8087
    web.http.signaling.path=/api/signaling
    web.http.protocol.port=8084
    web.http.protocol.path=/api/v1/dsp
    web.http.public.port=8086
    web.http.public.path=/api/public
    tx.dpf.consumer.proxy.port=8088
      
    edc.dataplane.token.validation.endpoint=http://tiera-control-plane:8083/control/token
    
    ###
    # Chapter Security
    ###

    edc.vault.hashicorp.url={{ .Values.security.vaultUrl }}
    edc.vault.hashicorp.token={{ .Values.security.vaultToken }}
    edc.vault.hashicorp.timeout.seconds=30
    edc.vault.hashicorp.health.check.enabled=false
    edc.vault.hashicorp.health.check.standby.ok=false
    edc.vault.hashicorp.api.secret.path=/v1/knowledge
    edc.vault.hashicorp.api.health.check.path=/v1/sys/health

    edc.vault.name=tsyidsconnectors
        
    ###
    # Chapter Dataspace Protocol
    ###

    edc.dsp.callback.address=https://{{ .Values.ingress.host }}/tiera-edc-control/{{ .Values.dataspace.bpnTier1 }}/api/v1/dsp
    edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
    edc.oauth.provider.audience=https://{{ .Values.ingress.host }}/tiera-edc-control/{{ .Values.dataspace.bpnTier1 }}/api/v1/dsp

    edc.negotiation.consumer.send.retry.limit=0
    edc.negotiation.provider.send.retry.limit=0

    ###
    # Chapter SSI
    ###

    edc.iam.trusted-issuer.catena.id=did:web:dim-static-prod.dis-cloud-prod.cfapps.eu10-004.hana.ondemand.com:dim-hosted:2f45795c-d6cc-4038-96c9-63cedc0cd266:holder-iatp
    edc.iam.sts.oauth.token.url=https://bpnl00000003cpiy-knowledge--agents--supplier--inc.authentication.eu10.hana.ondemand.com/oauth/token
    edc.iam.sts.oauth.client.id={{ .Values.dataspace.miwClientTier1 }}
    edc.iam.sts.oauth.client.secret.alias=sts-supplier-secret
    edc.iam.sts.dim.url=https://dis-integration-service-prod.eu10.dim.cloud.sap/api/v2.0.0/iatp/catena-x-portal
    tx.iam.iatp.bdrs.server.url=https://bpn-did-resolution-service.int.demo.catena-x.net/api/directory
    tx.iam.iatp.bdrs.cache.validity=600

    ###
    # Chapter Data Planes
    ###
    edc.dataplane.selector.agentplane.url=http://tiera-data-plane:8083/api/signaling/v1/dataflows
    edc.dataplane.selector.agentplane.sourcetypes=cx-common:Protocol?w3c:http:SPARQL,cx-common:Protocol?w3c:http:SKILL,HttpData,AmazonS3,AzureStorage
    edc.dataplane.selector.agentplane.transfertypes=HttpData-PULL,HttpData-PUSH,AmazonS3-PUSH,AzureStorage-PUSH
    edc.dataplane.selector.agentplane.destinationtypes=HttpData,HttpProxy,AmazonS3,AzureStorage
    edc.dataplane.selector.agentplane.properties={ "publicApiUrl": "https://{{ .Values.ingress.host }}/tiera-edc-data/{{ .Values.dataspace.bpnTier1 }}/api/public/" }

    edc.dataplane.token.expiry=360
    edc.dataplane.token.expiry.tolerance=10

    edc.transfer.send.retry.limit=0

    ###
    # Chapter Persistence
    ###

    edc.datasource.asset.name=asset
    edc.datasource.asset.user=tiera_user
    edc.datasource.asset.password=sacred
    edc.datasource.asset.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.contractdefinition.name=contractdefinition
    edc.datasource.contractdefinition.user=tiera_user
    edc.datasource.contractdefinition.password=sacred
    edc.datasource.contractdefinition.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.contractnegotiation.name=contractnegotiation
    edc.datasource.contractnegotiation.user=tiera_user
    edc.datasource.contractnegotiation.password=sacred
    edc.datasource.contractnegotiation.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.policy.name=policy
    edc.datasource.policy.user=tiera_user
    edc.datasource.policy.password=sacred
    edc.datasource.policy.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.policy-monitor.name=policy-monitor
    edc.datasource.policy-monitor.user=tiera_user
    edc.datasource.policy-monitor.password=sacred
    edc.datasource.policy-monitor.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.transferprocess.name=transferprocess
    edc.datasource.transferprocess.user=tiera_user
    edc.datasource.transferprocess.password=sacred
    edc.datasource.transferprocess.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.bpn.name=bpn
    edc.datasource.bpn.user=tiera_user
    edc.datasource.bpn.password=sacred
    edc.datasource.bpn.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.edr.name=edr
    edc.datasource.edr.user=tiera_user
    edc.datasource.edr.password=sacred
    edc.datasource.edr.url=jdbc:postgresql://postgresql:5432/tiera
  opentelemetry.properties: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  logging.properties: |-
    .level=INFO
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tiera-control-plane
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/tiera-control-plane: default
spec:
  selector:
    matchLabels:
      app: tiera-control-plane
  template:
    metadata:
      labels:
        app: tiera-control-plane
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - image: tractusx/edc-controlplane-postgresql-azure-vault:0.7.0
          imagePullPolicy: Always
          name: tiera-control-plane
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          ports:
            - containerPort: 8080 # API
            - containerPort: 8081 # MANAGEMENT
            - containerPort: 8083 # CONTROL
            - containerPort: 8087 # SIGNALING
            - containerPort: 8084 # PROTOCOL
            - containerPort: 8086 # PUBLIC
            - containerPort: 8088 # PROXY
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration.properties
            - name: AZURE_CLIENT_ID
              value: {{ .Values.security.vaultClient }}
            - name: AZURE_CLIENT_SECRET
              value: {{ .Values.security.vaultSecret }}
            - name: AZURE_TENANT_ID
              value: {{ .Values.security.vaultTenant }}
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 512Mi
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8080
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - name: control-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: control-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
      volumes:
        - name: control-plane-config
          configMap:
            name: tiera-control-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: tiera-control-plane
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
      targetPort: 8080
    - port: 8081
      name: management
      targetPort: 8081
    - port: 8083
      name: control
      targetPort: 8083
    - port: 8087
      name: signaling
      targetPort: 8087
    - port: 8084
      name: protocol
      targetPort: 8084
    - port: 8086
      name: public
      targetPort: 8086
    - port: 8088
      name: proxy
      targetPort: 8088
  selector:
    app: tiera-control-plane
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tiera-control-plane-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/tiera-control-plane"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /tiera-edc-control/{{ .Values.dataspace.bpnTier1 }}/(management)(.*)
            pathType: Prefix
            backend:
              service:
                name: tiera-control-plane
                port:
                  number: 8081
          - path: /tiera-edc-control/{{ .Values.dataspace.bpnTier1 }}/(api/v1/dsp)(.*)
            pathType: Prefix
            backend:
              service:
                name: tiera-control-plane
                port:
                  number: 8084
          - path: /tiera-edc-control/{{ .Values.dataspace.bpnTier1 }}/(api/check)(.*)
            pathType: Prefix
            backend:
              service:
                name: tiera-control-plane
                port:
                  number: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tiera-data-plane-config
  namespace: {{ .Values.namespace }}
data:
  configuration.properties: |-
    ###########################################
    # LOCAL EDC AGENT PLANE CONFIG (SUPPLIER)
    ###########################################

    ###
    # Chapter General Settings
    ###

    edc.fs.config=/connector-config/configuration.properties
    edc.hostname={{ .Values.ingress.host }}
    
    edc.participant.id={{ .Values.dataspace.bpnTier1 }}
    edc.iam.issuer.id=did:web:portal-backend.int.demo.catena-x.net:api:administration:staticdata:did:{{ .Values.dataspace.bpnTier1 }}

    ###
    # Chapter Web Server / Ports
    ###

    edc.api.auth.key={{ .Values.security.xApiKey }}
    web.http.default.port=8080
    web.http.default.path=/api
    web.http.public.port=8081
    web.http.public.path=/api/public
    web.http.signaling.port=8083
    web.http.signaling.path=/api/signaling

    web.http.callback.port=8187
    web.http.callback.path=/callback

    # We setup a combined validation endpoint for two control planes
    edc.dataplane.token.validation.endpoint=http://tiera-control-plane:8083/control/token

    ###
    # Chapter Security
    ###

    edc.vault.hashicorp.url={{ .Values.security.vaultUrl }}
    edc.vault.hashicorp.token={{ .Values.security.vaultToken }}
    edc.vault.hashicorp.timeout.seconds=30
    edc.vault.hashicorp.health.check.enabled=false
    edc.vault.hashicorp.health.check.standby.ok=false
    edc.vault.hashicorp.api.secret.path=/v1/knowledge
    edc.vault.hashicorp.api.health.check.path=/v1/sys/health

    edc.vault.name=tsyidsconnectors

    edc.transfer.proxy.token.signer.privatekey.alias=tier1-daps-key
    edc.transfer.proxy.token.verifier.publickey.alias=tier1-daps-crt

    # Configure a flexible (JWT-based) Application-Side Authentication
    tractusx.auth.agent.type=jwt
    tractusx.auth.agent.publickey=https://centralidp.int.demo.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/certs
    tractusx.auth.agent.register=true
    tractusx.auth.agent.checkexpiry=false
    tractusx.auth.agent.paths=default
    tractusx.auth.agent.exclude=.*(/check/).*
      
    ###
    # Chapter SSI
    ###

    edc.iam.trusted-issuer.catena.id=did:web:dim-static-prod.dis-cloud-prod.cfapps.eu10-004.hana.ondemand.com:dim-hosted:2f45795c-d6cc-4038-96c9-63cedc0cd266:holder-iatp
    edc.iam.sts.oauth.token.url=https://bpnl00000003cpiy-knowledge--agents--supplier--inc.authentication.eu10.hana.ondemand.com/oauth/token
    edc.iam.sts.oauth.client.id={{ .Values.dataspace.miwClientTier1 }}
    edc.iam.sts.oauth.client.secret.alias=sts-supplier-secret
    edc.iam.sts.dim.url=https://dis-integration-service-prod.eu10.dim.cloud.sap/api/v2.0.0/iatp/catena-x-portal
    tx.iam.iatp.bdrs.server.url=https://bpn-did-resolution-service.int.demo.catena-x.net/api/directory
    tx.iam.iatp.bdrs.cache.validity=600

    ###
    # Chapter Trust & Dataspace
    ###

    edc.dataplane.api.public.baseurl=https://{{ .Values.ingress.host }}/tiera-edc-data/{{ .Values.dataspace.bpnTier1 }}/api/public/

    edc.dataplane.token.expiry=360
    edc.dataplane.token.expiry.tolerance=10

    cx.agent.controlplane.protocol=http://tiera-control-plane:8084
    cx.agent.controlplane.management=http://tiera-control-plane:8081/management
    cx.agent.callback=http://tiera-data-plane:8187/callback/transfer-process-started
    cx.agent.skill.contract.default=Contract?supplier=Skill

    ###
    # Chapter Agent Catalogue
    ###

    cx.agent.asset.file=dataspace.ttl
    cx.agent.dataspace.synchronization=360000
    cx.agent.dataspace.remotes=BPNL00000003CPIY=https://{{ .Values.ingress.host}}/tiera-edc-control/{{ .Values.dataspace.bpnTier1 }}

    ###
    # Chapter Persistence
    ###

    edc.datasource.edr.name=edr
    edc.datasource.edr.user=tiera_user
    edc.datasource.edr.password=sacred
    edc.datasource.edr.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.dataplane.name=edr
    edc.datasource.dataplane.user=tiera_user
    edc.datasource.dataplane.password=sacred
    edc.datasource.dataplane.url=jdbc:postgresql://postgresql:5432/tiera

    edc.datasource.accesstokendata.name=edr
    edc.datasource.accesstokendata.user=tiera_user
    edc.datasource.accesstokendata.password=sacred
    edc.datasource.accesstokendata.url=jdbc:postgresql://postgresql:5432/tiera
  opentelemetry.properties: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  logging.properties: |-
    .level=INFO
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
  agent.ttl: |-
{{- .Files.Get .Values.dataspace.config | nindent 4 }}
  dataspace.ttl: |-
{{- .Files.Get .Values.dataspace.ontology | nindent 4 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tiera-data-plane
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/tiera-data-plane: default
spec:
  selector:
    matchLabels:
      app: tiera-data-plane
  template:
    metadata:
      labels:
        app: tiera-data-plane
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
            type: RuntimeDefault
      containers:
        - image: ghcr.io/catenax-ng/tx-knowledge-agents-edc/agentplane-azure-vault:1.12.19
          imagePullPolicy: Always
          name: tiera-data-plane
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false   
            readOnlyRootFilesystem: false
          ports:
            - containerPort: 8080 # API
            - containerPort: 8081 # PUBLIC
            - containerPort: 8083 # SIGNALING
            - containerPort: 8187 # CALLBACK
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration.properties
            - name: AZURE_CLIENT_ID
              value: {{ .Values.security.vaultClient }}
            - name: AZURE_CLIENT_SECRET
              value: {{ .Values.security.vaultSecret }}
            - name: AZURE_TENANT_ID
              value: {{ .Values.security.vaultTenant }}
          resources:
           requests:
            cpu: 500m
            memory: 512Mi
           limits:
            cpu: 500m
            memory: 512Mi
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8080
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5          
          volumeMounts:
            - name: tiera-data-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: tiera-data-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration.properties
              readOnly: true
            - name: tiera-data-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: tiera-data-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
            - name: tiera-data-plane-config
              mountPath: /app/agent.ttl
              subPath: agent.ttl
              readOnly: true
            - name: tiera-data-plane-config
              mountPath: /app/dataspace.ttl
              subPath: dataspace.ttl
              readOnly: true
      volumes:
        - name: tiera-data-plane-config
          configMap:
            name: tiera-data-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: tiera-data-plane
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
      targetPort: 8080
    - port: 8081
      name: public
      targetPort: 8081
    - port: 8083
      name: signaling
      targetPort: 8083
    - port: 8187
      name: callback
      targetPort: 8187
  selector:
    app: tiera-data-plane
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tiera-data-plane-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/tiera-data-plane"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /tiera-edc-data/{{ .Values.dataspace.bpnTier1 }}/(api/public)(.*)
            pathType: Prefix
            backend:
              service:
                name: tiera-data-plane
                port:
                  number: 8081
          - path: /tiera-edc-data/{{ .Values.dataspace.bpnTier1 }}/(api)(.*)
            pathType: Prefix
            backend:
              service:
                name: tiera-data-plane
                port:
                  number: 8080

