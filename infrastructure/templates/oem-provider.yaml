apiVersion: v1
kind: ConfigMap
metadata:
  name: oem-provider-agent-config
  namespace: {{ .Values.namespace }}
data:
  cx-ontology.xml: |-
{{- .Files.Get "oem/resources/cx-ontology.xml" | nindent 4 }}
  dtc.obda: |-
{{- .Files.Get "oem/resources/dtc.obda" | nindent 4 }}
  settings.properties: |-
{{- .Files.Get "oem/resources/settings.properties" | nindent 4 }}
  portal.toml: |-
{{- .Files.Get "oem/resources/portal.toml" | nindent 4 }}
---
apiVersion: v1
data:
  auth: {{ .Values.security.htpasswd }} 
kind: {{ .Values.security.htpasswdtype }}
metadata:
  name: oem-provider-auth
  namespace: {{ .Values.namespace }}
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-provider-agent
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-provider-agent: default
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: oem-provider-agent
  template:
    metadata:
      labels:
        app: oem-provider-agent
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10000
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
           type: RuntimeDefault
      containers:
        - name: oem-provider-agent
          image: ghcr.io/catenax-ng/product-knowledge/dataspace/provisioning-agent:0.5.3-SNAPSHOT
          imagePullPolicy: Always
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          ports:
            - containerPort: 8080 # API
          resources:
           requests:
            cpu: 0.5
            memory: "512Mi"
           limits:
            cpu: 0.5
            memory: "512Mi"
          startupProbe:
            failureThreshold: 18
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 300
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5        
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "" #"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8090"
            - name: ONTOP_ONTOLOGY_FILE 
              value: "/input/cx-ontology.xml"
            - name: ONTOP_MAPPING_FILE 
              value: "/input/dtc.obda"
            - name: ONTOP_PROPERTIES_FILE
              value: "/input/settings.properties"
            - name: ONTOP_PORTAL_FILE
              value: "/input/portal.toml"
          volumeMounts:
            - name: oem-provider-agent-config
              mountPath: /input
      volumes:
        - name: oem-provider-agent-config
          configMap:
            name: oem-provider-agent-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-provider-agent
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: oem-provider-agent
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-provider-agent-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-provider-agent"
    nginx.org/mergeable-ingress-type: master
    # type of authentication
    nginx.ingress.kubernetes.io/auth-type: basic
    # name of the secret that contains the user/password definitions
    nginx.ingress.kubernetes.io/{{ .Values.security.authType }}: oem-provider-auth
    # message to display with an appropriate context why the authentication is required
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - OEM'
spec:
  tls:
    - hosts:
        - {{ .Values.ingress.host }}
      secretName: tls-knowledge
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-provider-agent(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-provider-agent
                port:
                  number: 8080