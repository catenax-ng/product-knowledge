apiVersion: v1
kind: ConfigMap
metadata:
  name: oem-provider-agent-config
  namespace: {{ .Values.namespace }}
data:
  settings.local.properties: |-
{{- .Files.Get "oem/resources/settings.local.properties" | nindent 4 }}
  settings.dremio.properties: |-
    # Use the Data Virtualization backend
    jdbc.url=jdbc\:dremio\:direct\=oem-backend\:31010
    jdbc.driver=com.dremio.jdbc.Driver
    jdbc.user={{ .Values.security.backendUser }}
    jdbc.password={{ .Values.security.backendPwd }}
    ontop.cardinalityMode=LOOSE
    com.dremio.jdbc.Driver-metadataProvider = it.unibz.inf.ontop.dbschema.impl.KeyAwareDremioDbMetadataProvider
    com.dremio.jdbc.Driver-schemas = HI_TEST_OEM, TRACE_TEST_OEM
    com.dremio.jdbc.Driver-tables.HI_TEST_OEM = CX_RUL_SerialPartTypization_Vehicle,CX_RUL_SerialPartTypization_Component,CX_RUL_AssemblyPartRelationship,CX_RUL_LoadCollective
    com.dremio.jdbc.Driver-unique.HI_TEST_OEM.CX_RUL_SerialPartTypization_Vehicle = UC_VEHICLE
    com.dremio.jdbc.Driver-unique.HI_TEST_OEM.CX_RUL_SerialPartTypization_Component = UC_COMPONENT
    com.dremio.jdbc.Driver-unique.HI_TEST_OEM.CX_RUL_AssemblyPartRelationship = UC_ASSEMBLY
    com.dremio.jdbc.Driver-unique.HI_TEST_OEM.CX_RUL_LoadCollective = UC_LC
    com.dremio.jdbc.Driver-constraint.UC_VEHICLE = catenaXId
    com.dremio.jdbc.Driver-constraint.UC_COMPONENT = catenaXId
    com.dremio.jdbc.Driver-constraint.UC_ASSEMBLY = childCatenaXId,catenaXId
    com.dremio.jdbc.Driver-constraint.UC_LC = catenaXId,targetComponentId,metadata_componentDescription
    com.dremio.jdbc.Driver-foreign.HI_TEST_OEM.CX_RUL_AssemblyPartRelationship = FK_SERIAL_PARENT, FK_SERIAL_CHILD
    com.dremio.jdbc.Driver-constraint.FK_SERIAL_PARENT = catenaXId:CX_RUL_SerialPartTypization_Vehicle+UC_VEHICLE
    com.dremio.jdbc.Driver-constraint.FK_SERIAL_CHILD = childCatenaXId:CX_RUL_SerialPartTypization_Component+UC_COMPONENT
    com.dremio.jdbc.Driver-foreign.HI_TEST_OEM.CX_RUL_LoadCollective = FK_LC_PART
    com.dremio.jdbc.Driver-constraint.FK_LC_PART = catenaXId:CX_RUL_SerialPartTypization_Component+UC_COMPONENT
    com.dremio.jdbc.Driver-tables.TRACE_TEST_OEM = CX_TRC_PartAsPlanned, CX_TRC_PartSiteInformationAsPlanned,CX_TRC_SingleLevelBomAsPlanned,CX_TRC_MaterialForRecycling,CX_TRC_MaterialForRecycling_Components,CX_TRC_SingleLevelUsageAsPlanned
    com.dremio.jdbc.Driver-unique.TRACE_TEST_OEM.CX_TRC_PartAsPlanned = UC_PART
    com.dremio.jdbc.Driver-unique.TRACE_TEST_OEM.CX_TRC_PartSiteInformationAsPlanned = UC_PARTSITE
    com.dremio.jdbc.Driver-unique.TRACE_TEST_OEM.CX_TRC_SingleLevelBomAsPlanned = UC_SLBOM
    com.dremio.jdbc.Driver-unique.TRACE_TEST_OEM.CX_TRC_MaterialForRecycling = UC_PARTMATERIAL
    com.dremio.jdbc.Driver-unique.TRACE_TEST_OEM.CX_TRC_MaterialForRecycling_Components = UC_MATERIAL
    com.dremio.jdbc.Driver-unique.TRACE_TEST_OEM.CX_TRC_SingleLevelUsageAsPlanned = UC_SLUSG
    com.dremio.jdbc.Driver-constraint.UC_PART = catenaXId
    com.dremio.jdbc.Driver-constraint.UC_PARTSITE = catenaXId
    com.dremio.jdbc.Driver-constraint.UC_SLBOM = childCatenaXId,catenaXId
    com.dremio.jdbc.Driver-constraint.UC_PARTMATERIAL = catenaXId
    com.dremio.jdbc.Driver-constraint.UC_MATERIAL = catenaXId,component_material_name
    com.dremio.jdbc.Driver-constraint.UC_SLUSG = catenaXId,parentCatenaXId
    com.dremio.jdbc.Driver-foreign.TRACE_TEST_OEM.CX_TRC_SingleLevelBomAsPlanned = FK_SLBOM_PARENT, FK_SLBOM_CHILD
    com.dremio.jdbc.Driver-constraint.FK_SLBOM_PARENT = catenaXId:CX_TRC_PartAsPlanned+UC_PART
    com.dremio.jdbc.Driver-constraint.FK_SLBOM_CHILD = childCatenaXId:CX_TRC_PartAsPlanned+UC_PART
    com.dremio.jdbc.Driver-foreign.TRACE_TEST_OEM.CX_TRC_SingleLevelUsageAsPlanned = FK_SLUSG_PARENT, FK_SLUSG_CHILD
    com.dremio.jdbc.Driver-constraint.FK_SLUSG_PARENT = parentCatenaXId:CX_TRC_PartAsPlanned+UC_PART
    com.dremio.jdbc.Driver-constraint.FK_SLUSG_CHILD = catenaXId:CX_TRC_PartAsPlanned+UC_PART
    com.dremio.jdbc.Driver-foreign.TRACE_TEST_OEM.CX_TRC_PartAsPlanned = FK_PARTSITE, FK_PARTMATERIAL
    com.dremio.jdbc.Driver-foreign.TRACE_TEST_OEM.CX_TRC_PartSiteInformationAsPlanned = FK_SITEPART
    com.dremio.jdbc.Driver-constraint.FK_PARTSITE = catenaXId:CX_TRC_PartSiteInformationAsPlanned+UC_PARTSITE
    com.dremio.jdbc.Driver-constraint.FK_SITEPART = catenaXId:CX_TRC_PartAsPlanned+UC_PART
    com.dremio.jdbc.Driver-constraint.FK_PARTMATERIAL = catenaXId:CX_TRC_MaterialForRecycling+UC_PARTMATERIAL
    com.dremio.jdbc.Driver-foreign.TRACE_TEST_OEM.CX_TRC_MaterialForRecycling = FK_MATERIALPART
    com.dremio.jdbc.Driver-constraint.FK_MATERIALPART = catenaXId:CX_TRC_PartAsPlanned+UC_PART
    com.dremio.jdbc.Driver-foreign.TRACE_TEST_OEM.CX_TRC_MaterialForRecycling_Components = FK_COMPONENTMATERIAL
    com.dremio.jdbc.Driver-constraint.FK_COMPONENTMATERIAL = catenaXId,CX_TRC_MaterialForRecycling+UC_PARTMATERIAL
  portal.toml: |-
{{- .Files.Get "oem/resources/portal.toml" | nindent 4 }}
  dtc.obda: |-
{{- .Files.Get "oem/resources/dtc.obda" | nindent 4 }}
  hi.obda: |-
{{- .Files.Get "oem/resources/hi.obda" | nindent 4 }}
  rul.obda: |-
{{- .Files.Get "oem/resources/rul.obda" | nindent 4 }}
  trace.obda: |-
{{- .Files.Get "oem/resources/trace.obda" | nindent 4 }}
  quality.obda: |-
{{- .Files.Get "oem/resources/quality.obda" | nindent 4 }}
  cx-ontology.xml: |-
{{- .Files.Get "resources/cx-ontology.xml" | nindent 4 }}
  cx-ontology.ttl: |-
{{- .Files.Get "resources/cx-ontology.ttl" | nindent 4 }}
  cx-ontology-minimal.ttl: |-
{{- .Files.Get "resources/cx-ontology-minimal.ttl" | nindent 4 }}
---
apiVersion: v1
data:
  auth: {{ .Values.security.htpasswd }} 
kind: {{ .Values.security.htpasswdtype }}
metadata:
  name: oem-provider-auth
  namespace: {{ .Values.namespace }}
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-provider-agent
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-provider-agent: default
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: oem-provider-agent
  template:
    metadata:
      labels:
        app: oem-provider-agent
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10000
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
           type: RuntimeDefault
      containers:
        - name: oem-provider-agent
          image: docker.io/tractusx/knowledge-agents/provisioning-agent:1.12.19
          imagePullPolicy: Always
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          ports:
            - containerPort: 8080 # DTC
            - containerPort: 8081 # HI
            - containerPort: 8082 # TRACE
            - containerPort: 8083 # QUALITY
            - containerPort: 8084 # RUL
          resources:
           requests:
            cpu: 500m
            memory: 1536Mi
           limits:
            cpu: 500m
            memory: 1536Mi
          startupProbe:
            failureThreshold: 18
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 300
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5        
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "" #"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8090"
            - name: ONTOP_ONTOLOGY_FILE 
              value: "/opt/ontop/input/cx-ontology-minimal.ttl"
            - name: ONTOP_MAPPING_FILE 
              value: "/opt/ontop/input/rul.obda /opt/ontop/input/hi.obda /opt/ontop/input/trace.obda /opt/ontop/input/quality.obda /opt/ontop/input/dtc.obda"
            - name: ONTOP_PROPERTIES_FILE
              value: "/opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.dremio.properties /opt/ontop/input/settings.dremio.properties"
            - name: ONTOP_PORTAL_FILE
              value: "/opt/ontop/input/portal.toml"
            - name: ONTOP_DEV_MODE
              value: "false"
            - name: ONTOP_PORT
              value: "8084 8081 8082 8083 8080"
          volumeMounts:
            - name: oem-provider-agent-config
              mountPath: /opt/ontop/input
      volumes:
        - name: oem-provider-agent-config
          configMap:
            name: oem-provider-agent-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-provider-agent
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: diagnosis
      targetPort: 8080
    - port: 8081
      name: healthindicator
      targetPort: 8081
    - port: 8082
      name: traceability
      targetPort: 8082
    - port: 8083
      name: quality
      targetPort: 8083
    - port: 8084
      name: reliability
      targetPort: 8084
  selector:
    app: oem-provider-agent
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-provider-agent-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-provider-agent"
    nginx.org/mergeable-ingress-type: master
    # type of authentication
    #nginx.ingress.kubernetes.io/auth-type: basic
    # name of the secret that contains the user/password definitions
    #nginx.ingress.kubernetes.io/{{ .Values.security.authType }}: oem-provider-auth
    # message to display with an appropriate context why the authentication is required
    #nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - OEM'
spec:
  tls:
    - hosts:
        - {{ .Values.ingress.host }}
      secretName: tls-knowledge
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-provider-agent/(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-provider-agent
                port:
                  number: 8080
          - path: /oem-provider-agent2/(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-provider-agent
                port:
                  number: 8081
          - path: /oem-provider-agent3/(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-provider-agent
                port:
                  number: 8082
          - path: /oem-provider-agent4/(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-provider-agent
                port:
                  number: 8083
          - path: /oem-provider-agent5/(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-provider-agent
                port:
                  number: 8084
---
apiVersion: v1
data:
  azurestorageaccountname: {{ .Values.security.backupsName }} 
  azurestorageaccountkey: {{ .Values.security.backupsKey }} 
kind: {{ .Values.security.htpasswdtype }}
metadata:
  name: oem-backend-storage
  namespace: {{ .Values.namespace }}
type: Opaque
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oem-backend-config
  namespace: {{ .Values.namespace }}
data:
  dremio.conf: |-
    paths: {
      # the local path for dremio to store data.
      local: ${DREMIO_HOME}"/data"

      # the distributed path Dremio data including job results, downloads, uploads, etc
      #dist: "pdfs://"${paths.local}"/pdfs"
    }

    services: {
      coordinator.enabled: true,
      coordinator.master.enabled: true,
      executor.enabled: true,
      flight.use_session_service: true,
      conduit.port: 37877
    } 

    registration.publish-host: "oem-backend"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-backend
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-provider-agent: default
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: oem-backend
  template:
    metadata:
      labels:
        app: oem-backend
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10000
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
           type: RuntimeDefault
      containers:
        - name: oem-backend
          image: ghcr.io/catenax-ng/product-knowledge/virtualizer-dremio:{{.Values.version}}
          imagePullPolicy: Always
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          ports:
            - containerPort: 2181   # Zookeeper
            - containerPort: 9047   # Web
            - containerPort: 31010  # JDBC
            - containerPort: 32010  # Arrow
            - containerPort: 37877  # Conduit
            - containerPort: 45678  # Dremio Exec
          resources:
           requests:
            cpu: 500m
            memory: 4Gi
           limits:
            cpu: 500m
            memory: 4Gi
          startupProbe:
            failureThreshold: 18
            httpGet:
              path: /
              port: 9047
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 9047
              scheme: HTTP
            periodSeconds: 300
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /
              port: 9047
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5        
          env:
#            - name: JAVA_TOOL_OPTIONS
#              value: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8090"
          volumeMounts:
            - name: data
              mountPath: /opt/dremio/data
            - name: oem-backend-config
              mountPath: /opt/dremio/conf/dremio.conf
              subPath: dremio.conf
              readOnly: true
      volumes:
        - name: data
          size: "4Gi"
        - name: oem-backend-config
          configMap:
            name: oem-backend-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-backend
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 2181
      name: zookeeper
      targetPort: 2181
    - port: 9047
      name: web
      targetPort: 9047
    - port: 31010
      name: jdbc
      targetPort: 31010
    - port: 32010
      name: arrow
      targetPort: 32010
    - port: 37877
      name: conduit
      targetPort: 37877
    - port: 45678
      name: execute
      targetPort: 45678
  selector:
    app: oem-backend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-backend-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-backend"
    nginx.org/mergeable-ingress-type: master
    # type of authentication
    #nginx.ingress.kubernetes.io/auth-type: basic
    # name of the secret that contains the user/password definitions
    #nginx.ingress.kubernetes.io/{{ .Values.security.authType }}: oem-provider-auth
    # message to display with an appropriate context why the authentication is required
    #nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - OEM'
spec:
  tls:
    - hosts:
        - {{ .Values.ingress.oemHost }}
      secretName: tls-knowledge-oem
  rules:
    - host: {{ .Values.ingress.oemHost }}
      http:
        paths:
          - path: /(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-backend
                port:
                  number: 9047
