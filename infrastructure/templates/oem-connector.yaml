apiVersion: v1
kind: ConfigMap
metadata:
  name: oem-control-plane-config
  namespace: {{ .Values.namespace }}
data:
  configuration.properties: |-
    web.http.default.port=8080
    web.http.default.path=/api
    web.http.data.port=8181
    web.http.data.path=/data
    web.http.validation.port=8182
    web.http.validation.path=/validation
    web.http.control.port=9999
    web.http.control.path=/api/controlplane/control
    web.http.ids.port=8282
    web.http.ids.path=/api/v1/ids
    web.http.metrics.port=9998
    web.http.metrics.path=/metrics
    
    edc.api.auth.key={{ .Values.security.xApiKey }}
    edc.api.control.auth.apikey.key=X-Api-Key
    edc.api.control.auth.apikey.value={{ .Values.security.xApiKey }}
    
    edc.fs.config=/connector-config/configuration.properties
    edc.hostname={{ .Values.ingress.host }}
    
    edc.ids.catalog.id=urn:catalog:catenax
    edc.ids.curator=http://catenax.net
    edc.ids.description=Eclipse Dataspace Connector for Knowledge Agents OEM
    # whatever that is needed
    edc.ids.endpoint=https://{{ .Values.ingress.host }}/oem-edc-control/{{ .Values.dataspace.bpnOem }}/api/v1/ids
    # This is checked as the audience for incoming ids messages/tokens
    edc.ids.endpoint.audience=https://{{ .Values.ingress.host }}/oem-edc-control/{{ .Values.dataspace.bpnOem }}/api/v1/ids/data
    # This is send as the audience to outgoing ids messages/tokens
    ids.webhook.address=https://{{ .Values.ingress.host }}/oem-edc-control/{{ .Values.dataspace.bpnOem }}
    edc.ids.validation.referringconnector=false
    edc.ids.id=urn:connector:edc:oem
    edc.ids.maintainer=http://catenax.net
    edc.ids.security.profile=base
    edc.ids.title=OEM Dataspace Connector
    
    edc.oauth.client.id={{ .Values.dataspace.dapsClientIdOem }}
    edc.oauth.private.key.alias={{ .Values.dataspace.privateKeyAliasOem }}
    edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL

    edc.data.encryption.algorithm=NONE
      # edc.data.encryption.keys.alias
    
    edc.oauth.provider.jwks.url={{ .Values.security.dapsUrl }}/.well-known/jwks.json
    edc.oauth.public.key.alias={{ .Values.dataspace.publicKeyAliasOem }}
    edc.oauth.token.url={{ .Values.security.dapsUrl }}/token
    
    edc.receiver.http.auth-code=X-Api-Key
    edc.receiver.http.auth-key={{ .Values.security.xApiKey }}
    edc.receiver.http.endpoint=http://oem-data-plane:8186/callback/endpoint-data-reference

    edc.dataplane.selector.agentplane.url=http://oem-data-plane:8082/
    edc.dataplane.selector.agentplane.sourcetypes=urn:cx:Protocol:w3c:Http#SPARQL
    edc.dataplane.selector.agentplane.destinationtypes=HttpProxy
    edc.dataplane.selector.agentplane.properties={ "publicApiUrl": "https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}/api/public" }
                                                                 
    edc.transfer.proxy.endpoint=https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}
    edc.transfer.proxy.token.signer.privatekey.alias={{ .Values.dataspace.privateKeyAliasOem }}
    edc.transfer.proxy.token.verifier.publickey.alias={{ .Values.dataspace.publicKeyAliasOem }}
    
    edc.vault.clientid={{ .Values.security.vaultClientId }} 
    edc.vault.clientsecret={{ .Values.security.vaultClientSecret }}
    edc.vault.name={{ .Values.security.vaultName }}
    edc.vault.tenantid={{ .Values.security.vaultTenant }}
  configuration2.properties: |-
    web.http.default.port=8080
    web.http.default.path=/api
    web.http.data.port=8181
    web.http.data.path=/data
    web.http.validation.port=8182
    web.http.validation.path=/validation
    web.http.control.port=9999
    web.http.control.path=/api/controlplane/control
    web.http.ids.port=8282
    web.http.ids.path=/api/v1/ids
    web.http.metrics.port=9998
    web.http.metrics.path=/metrics
    
    edc.api.auth.key={{ .Values.security.xApiKey }}
    edc.api.control.auth.apikey.key=X-Api-Key
    edc.api.control.auth.apikey.value={{ .Values.security.xApiKey }}
    
    edc.fs.config=/connector-config/configuration.properties
    edc.hostname={{ .Values.ingress.host }}
    
    edc.ids.catalog.id=urn:catalog:catenax
    edc.ids.curator=http://catenax.net
    edc.ids.description=Eclipse Dataspace Connector for Knowledge Agents OEM
    # whatever that is needed
    edc.ids.endpoint=https://{{ .Values.ingress.host }}/oem-edc-control2/{{ .Values.dataspace.bpnOem }}/api/v1/ids
    # This is send as the audience to outgoing ids messages/tokens
    ids.webhook.address=https://{{ .Values.ingress.host }}/oem-edc-control2/{{ .Values.dataspace.bpnOem }}
    edc.ids.validation.referringconnector=false
    edc.ids.id=urn:connector:edc:oem
    edc.ids.maintainer=http://catenax.net
    edc.ids.security.profile=base
    edc.ids.title=OEM Dataspace Connector
    
    edc.oauth.client.id={{ .Values.dataspace.dapsClientIdOem }}
    edc.oauth.private.key.alias={{ .Values.dataspace.privateKeyAliasOem }}
    edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
    edc.oauth.endpoint.audience=https://{{ .Values.ingress.host }}/oem-edc-control2/{{ .Values.dataspace.bpnOem }}/api/v1/ids/data

    edc.data.encryption.algorithm=NONE
      # edc.data.encryption.keys.alias
    
    edc.oauth.provider.jwks.url={{ .Values.security.dapsUrl }}/.well-known/jwks.json
    edc.oauth.public.key.alias={{ .Values.dataspace.publicKeyAliasOem }}
    edc.oauth.token.url={{ .Values.security.dapsUrl }}/token
    
    edc.receiver.http.auth-code=X-Api-Key
    edc.receiver.http.auth-key={{ .Values.security.xApiKey }}
    edc.receiver.http.endpoint=http://oem-data-plane:8186/callback/endpoint-data-reference

    edc.dataplane.selector.agentplane.url=http://oem-data-plane:8082/
    edc.dataplane.selector.agentplane.sourcetypes=urn:cx:Protocol:w3c:Http#SPARQL
    edc.dataplane.selector.agentplane.destinationtypes=HttpProxy
    edc.dataplane.selector.agentplane.properties={ "publicApiUrl": "https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}/api/public" }
                                                                 
    edc.transfer.proxy.endpoint=https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}
    edc.transfer.proxy.token.signer.privatekey.alias={{ .Values.dataspace.privateKeyAliasOem }}
    edc.transfer.proxy.token.verifier.publickey.alias={{ .Values.dataspace.publicKeyAliasOem }}
    
    edc.vault.clientid={{ .Values.security.vaultClientId }} 
    edc.vault.clientsecret={{ .Values.security.vaultClientSecret }}
    edc.vault.name={{ .Values.security.vaultName }}
    edc.vault.tenantid={{ .Values.security.vaultTenant }}
  opentelemetry.properties: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  logging.properties: |-
    .level=FINE
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-control-plane
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-control-plane: default
spec:
  selector:
    matchLabels:
      app: oem-control-plane
  template:
    metadata:
      labels:
        app: oem-control-plane
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
            type: RuntimeDefault
      containers:
        - image: ghcr.io/catenax-ng/product-knowledge/controlplane-memory:{{.Values.version}}
          imagePullPolicy: Always
          name: oem-control-plane
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false   
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8080 # API
            - containerPort: 8181 # DATA
            - containerPort: 8182 # VALIDATION
            - containerPort: 8282 # IDS
            - containerPort: 9999 # CONTROL
            - containerPort: 9998 # METRICS
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration.properties
          resources:
           requests:
            cpu: 0.5
            memory: "512Mi"
           limits:
            cpu: 0.5
            memory: "512Mi"
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8080
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5          
          volumeMounts:
            - name: control-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: control-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
      volumes:
        - name: control-plane-config
          configMap:
            name: oem-control-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-control-plane
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
      targetPort: 8080
    - port: 8181
      name: data
      targetPort: 8181
    - port: 8182
      name: validation
      targetPort: 8182
    - port: 8282
      name: ids
      targetPort: 8282
    - port: 9999
      name: control
      targetPort: 9999
    - port: 9998
      name: metrics
      targetPort: 9998
  selector:
    app: oem-control-plane
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-control-plane-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2$3
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-control-plane"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-edc-control/{{ .Values.dataspace.bpnOem }}/(data)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane
                port:
                  number: 8181
          - path: /oem-edc-control/{{ .Values.dataspace.bpnOem }}/(api/v1/ids)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane
                port:
                  number: 8282
          - path: /oem-edc-control/{{ .Values.dataspace.bpnOem }}/(api/check)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane
                port:
                  number: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-control-plane2
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-control-plane: default
spec:
  selector:
    matchLabels:
      app: oem-control-plane2
  template:
    metadata:
      labels:
        app: oem-control-plane2
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
            type: RuntimeDefault
      containers:
        - image: ghcr.io/catenax-ng/product-knowledge/controlplane-memory:{{.Values.version}}
          imagePullPolicy: Always
          name: oem-control-plane2
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false   
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8080 # API
            - containerPort: 8181 # DATA
            - containerPort: 8182 # VALIDATION
            - containerPort: 8282 # IDS
            - containerPort: 9999 # CONTROL
            - containerPort: 9998 # METRICS
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration2.properties
          resources:
           requests:
            cpu: 0.5
            memory: "512Mi"
           limits:
            cpu: 0.5
            memory: "512Mi"
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8080
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5          
          volumeMounts:
            - name: control-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: control-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration2.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
      volumes:
        - name: control-plane-config
          configMap:
            name: oem-control-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-control-plane2
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
      targetPort: 8080
    - port: 8181
      name: data
      targetPort: 8181
    - port: 8182
      name: validation
      targetPort: 8182
    - port: 8282
      name: ids
      targetPort: 8282
    - port: 9999
      name: control
      targetPort: 9999
    - port: 9998
      name: metrics
      targetPort: 9998
  selector:
    app: oem-control-plane2
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-control-plane2-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2$3
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-control-plane2"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-edc-control2/{{ .Values.dataspace.bpnOem }}/(data)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane2
                port:
                  number: 8181
          - path: /oem-edc-control2/{{ .Values.dataspace.bpnOem }}/(api/v1/ids)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane2
                port:
                  number: 8282
          - path: /oem-edc-control2/{{ .Values.dataspace.bpnOem }}/(api/check)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane2
                port:
                  number: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oem-data-plane-config
  namespace: {{ .Values.namespace }}
data:
  configuration.properties: |-
    ids.webhook.address=http://oem-data-plane:8080
    
    web.http.default.port=8082
    web.http.default.path=/api
    web.http.public.port=8185
    web.http.public.path=/api/public
    web.http.callback.port=8186
    web.http.callback.path=/callback
    web.http.control.port=9999
    web.http.control.path=/api/dataplane/control
    
    edc.api.auth.key={{ .Values.security.xApiKey }}
    edc.api.control.auth.apikey.key=X-Api-Key
    edc.api.control.auth.apikey.value={{ .Values.security.xApiKey }}
    
    cx.agent.controlplane.url=http://oem-control-plane2:8181/data
    cx.agent.asset.file=dataspace.ttl
    cx.agent.dataspace.synchronization=60000
    cx.agent.dataspace.remotes=https://{{ .Values.ingress.host}}/tiera-edc-control/BPNL00000003CPIY

        # edc.api.control.auth.apikey.key=
        # edc.api.control.auth.apikey.value=
        # edc.assetindex.cosmos.account-name=
        # edc.assetindex.cosmos.container-name=
        # edc.assetindex.cosmos.database-name=
        # edc.assetindex.cosmos.preferred-region=
        # edc.atomikos.checkpoint.interval=
        # edc.atomikos.directory=
        # edc.atomikos.logging=
        # edc.atomikos.threaded2pc=
        # edc.atomikos.timeout=
        # edc.aws.access.key=
        # edc.aws.provision.retry.retries.max=
        # edc.aws.provision.role.duration.session.max=
        # edc.aws.secret.access.key=
        # edc.blobstore.endpoint=
        # edc.contractdefinitionstore.cosmos.account-name=
        # edc.contractdefinitionstore.cosmos.container-name=
        # edc.contractdefinitionstore.cosmos.database-name=
        # edc.contractdefinitionstore.cosmos.preferred-region=
        # edc.contractnegotiationstore.cosmos.account-name=
        # edc.contractnegotiationstore.cosmos.container-name=
        # edc.contractnegotiationstore.cosmos.database-name=
        # edc.contractnegotiationstore.cosmos.preferred-region=
    edc.dataplane.token.validation.endpoint=http://oem-control-plane:8182/validation/token
        # edc.core.retry.backoff.max=
        # edc.core.retry.backoff.min=
        # edc.core.retry.retries.max=
        # edc.core.system.health.check.liveness-period=
        # edc.core.system.health.check.readiness-period=
        # edc.core.system.health.check.startup-period=
        # edc.core.system.health.check.threadpool-size=
        # edc.cosmos.partition-key=
        # edc.cosmos.query-metrics-enabled=
        # edc.dataplane.queue.capacity=
        # edc.dataplane.wait=
        # edc.dataplane.workers=
        # edc.datasource.asset.name="default"
        # edc.datasource.contractdefinition.name="default"
        # edc.datasource.contractnegotiation.name="default"
        # edc.datasource.policy.name="default"
        # edc.datasource.transferprocess.name="default"
        # edc.datasource.default.pool.maxIdleConnections=
        # edc.datasource.default.pool.maxTotalConnections=
        # edc.datasource.default.pool.minIdleConnections=
        # edc.datasource.default.pool.testConnectionOnBorrow=
        # edc.datasource.default.pool.testConnectionOnCreate=
        # edc.datasource.default.pool.testConnectionOnReturn=
        # edc.datasource.default.pool.testConnectionWhileIdle=
        # edc.datasource.default.pool.testQuery=
        # edc.datasource.default.url=
        # edc.datasource.default.user=
        # edc.datasource.default.password=
        # edc.dpf.selector.url=
        # edc.events.topic.endpoint=
        # edc.events.topic.name=
        # edc.fs.config=
        # edc.hostname=
        # edc.identity.did.url=
        # edc.ids.catalog.id=
        # edc.ids.curator=
        # edc.ids.description=
        # edc.ids.endpoint=
        # edc.ids.id=
        # edc.ids.maintainer=
        # edc.ids.security.profile=
        # edc.ids.title=
        # edc.ids.validation.referringconnector=
        # edc.ion.crawler.did-type=
        # edc.ion.crawler.interval-minutes=
        # edc.ion.crawler.ion.url=
        # edc.metrics.enabled=
        # edc.metrics.executor.enabled=
        # edc.metrics.jersey.enabled=
        # edc.metrics.jetty.enabled=
        # edc.metrics.okhttp.enabled=
        # edc.metrics.system.enabled=
        # edc.negotiation.consumer.state-machine.batch-size=
        # edc.negotiation.provider.state-machine.batch-size=
        # edc.node.directory.cosmos.account.name=
        # edc.node.directory.cosmos.container.name=
        # edc.node.directory.cosmos.database.name=
        # edc.node.directory.cosmos.preferred.region=
        # edc.oauth.client.id=
        # edc.oauth.private.key.alias=
        # edc.oauth.provider.audience=
        # edc.oauth.provider.jwks.refresh=
        # edc.oauth.provider.jwks.url=
        # edc.oauth.public.key.alias=
        # edc.oauth.token.url=
        # edc.oauth.validation.nbf.leeway=
        # edc.receiver.http.auth-code=
        # edc.receiver.http.auth-key=
        # edc.receiver.http.endpoint=
        # edc.transfer.proxy.endpoint=
        # edc.transfer.dataplane.sync.token.validity=
        # edc.transfer.proxy.token.signer.privatekey.alias=
        # edc.transfer.functions.check.endpoint=
        # edc.transfer.functions.enabled.protocols=
        # edc.transfer.functions.transfer.endpoint=
        # edc.transfer-process-store.cosmos.account.name=
        # edc.transfer-process-store.cosmos.container-name=
        # edc.transfer-process-store.cosmos.preferred-region=
        # edc.transfer-process-store.database.name=
        # edc.transfer.state-machine.batch-size=
    
    # edc.vault=
    # edc.vault.certificate=
    edc.vault.clientid={{ .Values.security.vaultClientId }} 
    edc.vault.clientsecret={{ .Values.security.vaultClientSecret }}
    edc.vault.name={{ .Values.security.vaultName }}
    edc.vault.tenantid={{ .Values.security.vaultTenant }}
    # edc.vault.url=
    # edc.vault.token=
    # edc.vault.timeout.seconds=
    
        # edc.webdid.doh.url=
        # edc.web.rest.cors.enabled=
        # edc.web.rest.cors.headers=
        # edc.web.rest.cors.methods=
        # edc.web.rest.cors.origins=
  opentelemetry.properties: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  logging.properties: |-
    .level=FINE
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
  agent.ttl: |-
  {{- .Files.Get .Values.dataspace.config | nindent 4 }}
  dataspace.ttl: |-
  {{- .Files.Get .Values.dataspace.ontology | nindent 4 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-data-plane
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-data-plane: default
spec:
  selector:
    matchLabels:
      app: oem-data-plane
  template:
    metadata:
      labels:
        app: oem-data-plane
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - image: ghcr.io/catenax-ng/product-knowledge/agentplane-azure-vault:{{.Values.version}}
          imagePullPolicy: Always
          name: oem-data-plane
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8082 # API
            - containerPort: 8185 # PUBLIC
            - containerPort: 8186 # AGREEMENT CALLBACK
            - containerPort: 9999 # CONTROL
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration.properties
          resources:
            requests:
              cpu: 0.5
              memory: "512Mi"
            limits:
              cpu: 0.5
              memory: "512Mi"
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8082
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8082
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - name: oem-data-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration.properties
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/agent.ttl
              subPath: agent.ttl
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/dataspace.ttl
              subPath: dataspace.ttl
              readOnly: true
      volumes:
        - name: oem-data-plane-config
          configMap:
            name: oem-data-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-data-plane
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8082
      name: api
      targetPort: 8082
    - port: 8185
      name: public
      targetPort: 8185
    - port: 8186
      name: callback
      targetPort: 8186
    - port: 9999
      name: control
      targetPort: 9999
  selector:
    app: oem-data-plane
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-data-plane-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2$3
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-data-plane"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-edc-data/{{ .Values.dataspace.bpnOem }}/(api/public)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-data-plane
                port:
                  number: 8185
          - path: /oem-edc-data/{{ .Values.dataspace.bpnOem }}/(api/agent)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-data-plane
                port:
                  number: 8082
          - path: /oem-edc-data/{{ .Values.dataspace.bpnOem }}/(callback)(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-data-plane
                port:
                  number: 8186

