apiVersion: v1
kind: ConfigMap
metadata:
  name: oem-control-plane-config
  namespace: {{ .Values.namespace }}
data:
  configuration.properties: |-
    ###############################################
    # LOCAL EDC CONTROL PLANE CONFIG (OEM PROVIDER)
    ###############################################

    ###
    # Chapter General Settings
    ###

    edc.fs.config=/connector-config/configuration.properties
    edc.hostname={{ .Values.ingress.host }}
    edc.participant.id={{ .Values.dataspace.bpnOem }}
    
    ###
    # Chapter Web Server / Ports
    ###

    web.http.default.port=8080
    web.http.default.path=/api
    web.http.management.port=8181
    web.http.management.path=/management
    web.http.control.port=9999
    web.http.control.path=/control
    web.http.protocol.port=8282
    web.http.protocol.path=/api/v1/dsp
    web.http.metrics.port=9998
    web.http.metrics.path=/metrics
    edc.jsonld.https.enabled=true
    
    ###
    # Chapter Security
    ###

    edc.transfer.proxy.token.signer.privatekey.alias=oem-key
    edc.transfer.proxy.token.verifier.publickey.alias=oem-cert

    edc.data.encryption.algorithm=AES
    edc.data.encryption.keys.alias=oem-symmetric-key
    edc.api.auth.key={{ .Values.security.xApiKey }}
    
    edc.vault.hashicorp.url={{ .Values.security.vaultUrl }}
    edc.vault.hashicorp.token={{ .Values.security.vaultToken }}
    edc.vault.hashicorp.timeout.seconds=30
    edc.vault.hashicorp.health.check.enabled=false
    edc.vault.hashicorp.health.check.standby.ok=false
    edc.vault.hashicorp.api.secret.path=/v1/knowledge
    edc.vault.hashicorp.api.health.check.path=/v1/sys/health

    ###
    # Chapter Trust & Dataspace
    ###

    tx.ssi.miw.url=https://managed-identity-wallets-new.int.demo.catena-x.net
    tx.ssi.miw.authority.id=BPNL00000003CRHK
    tx.ssi.oauth.token.url=https://centralidp.int.demo.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/token
    tx.ssi.oauth.client.id=sa232
    tx.ssi.oauth.client.secret.alias=miw_oem_secret
    tx.ssi.endpoint.audience=https://{{ .Values.ingress.host }}/oem-edc-control/{{ .Values.dataspace.bpnOem }}/api/v1/dsp
    edc.dsp.callback.address=https://{{ .Values.ingress.host }}/oem-edc-control/{{ .Values.dataspace.bpnOem }}/api/v1/dsp
    
    edc.transfer.proxy.endpoint=https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}
    edc.transfer.send.retry.limit=0
    edc.negotiation.consumer.send.retry.limit=0
    edc.negotiation.provider.send.retry.limit=0
    
    ###
    # Chapter Data Planes
    ###

    edc.dataplane.selector.agentplane.url=http://oem-data-plane:8082/
    edc.dataplane.selector.agentplane.sourcetypes=cx-common:Protocol?w3c:http:SPARQL,cx-common:Protocol?w3c:http:SKILL,HttpData,AmazonS3
    edc.dataplane.selector.agentplane.destinationtypes=HttpProxy,AmazonS3
    edc.dataplane.selector.agentplane.properties={ "publicApiUrl": "https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}/data/" }  
  configuration2.properties: |-
    ###############################################
    # LOCAL EDC CONTROL PLANE CONFIG (OEM CONSUMER)
    ###############################################

    ###
    # Chapter General Settings
    ###

    edc.fs.config=/connector-config/configuration2.properties
    edc.hostname={{ .Values.ingress.host }}
    edc.participant.id=BPNL00000003COJN

    ###
    # Chapter Web Server / Ports
    ###

    web.http.default.port=8080
    web.http.default.path=/api
    web.http.management.port=8181
    web.http.management.path=/management
    web.http.control.port=9999
    web.http.control.path=/control
    web.http.protocol.port=8282
    web.http.protocol.path=/api/v1/dsp
    web.http.metrics.port=9998
    web.http.metrics.path=/metrics
    edc.jsonld.https.enabled=true
    
    ###
    # Chapter Security
    ###

    edc.transfer.proxy.token.signer.privatekey.alias=oem-key
    edc.transfer.proxy.token.verifier.publickey.alias=oem-cert

    edc.data.encryption.algorithm=AES
    edc.data.encryption.keys.alias=oem-symmetric-key
    edc.api.auth.key={{ .Values.security.xApiKey }}
    
    edc.vault.hashicorp.url={{ .Values.security.vaultUrl }}
    edc.vault.hashicorp.token={{ .Values.security.vaultToken }}
    edc.vault.hashicorp.timeout.seconds=30
    edc.vault.hashicorp.health.check.enabled=false
    edc.vault.hashicorp.health.check.standby.ok=false
    edc.vault.hashicorp.api.secret.path=/v1/knowledge
    edc.vault.hashicorp.api.health.check.path=/v1/sys/health
    
    ###
    # Chapter Trust & Dataspace
    ###

    tx.ssi.miw.url=https://managed-identity-wallets-new.int.demo.catena-x.net
    tx.ssi.miw.authority.id=BPNL00000003CRHK
    tx.ssi.oauth.token.url=https://centralidp.int.demo.catena-x.net/auth/realms/CX-Central/protocol/openid-connect/token
    tx.ssi.oauth.client.id=sa232
    tx.ssi.oauth.client.secret.alias=miw_oem_secret
    tx.ssi.endpoint.audience=https://{{ .Values.ingress.host }}/oem-edc-control2/{{ .Values.dataspace.bpnOem }}/api/v1/dsp
    edc.dsp.callback.address=https://{{ .Values.ingress.host }}/oem-edc-control2/{{ .Values.dataspace.bpnOem }}/api/v1/dsp
    
    edc.transfer.proxy.endpoint=https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}
    edc.transfer.send.retry.limit=0
    edc.negotiation.consumer.send.retry.limit=0
    edc.negotiation.provider.send.retry.limit=0

    ###
    # Chapter Data Planes
    ###
    
    edc.dataplane.selector.agentplane.url=http://oem-data-plane:8082/
    edc.dataplane.selector.agentplane.sourcetypes=cx-common:Protocol?w3c:http:SPARQL,cx-common:Protocol?w3c:http:SKILL,HttpData,AmazonS3
    edc.dataplane.selector.agentplane.destinationtypes=HttpProxy,AmazonS3
    edc.dataplane.selector.agentplane.properties={ "publicApiUrl": "https://{{ .Values.ingress.host }}/oem-edc-data/{{ .Values.dataspace.bpnOem }}/data/" }
  opentelemetry.properties: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  logging.properties: |-
    .level=FINE
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-control-plane
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-control-plane: default
spec:
  selector:
    matchLabels:
      app: oem-control-plane
  template:
    metadata:
      labels:
        app: oem-control-plane
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
            type: RuntimeDefault
      containers:
        - image: tractusx/edc-controlplane-memory-hashicorp-vault:0.5.0
          imagePullPolicy: Always
          name: oem-control-plane
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false   
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8080 # API
            - containerPort: 8181 # MANAGEMENT
            - containerPort: 8282 # PROTOCOL
            - containerPort: 9999 # CONTROL
            - containerPort: 9998 # METRICS
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration.properties
          resources:
           requests:
            cpu: 500m
            memory: 512Mi
           limits:
            cpu: 500m
            memory: 512Mi
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8080
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5          
          volumeMounts:
            - name: control-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: control-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
      volumes:
        - name: control-plane-config
          configMap:
            name: oem-control-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-control-plane
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
      targetPort: 8080
    - port: 8181
      name: management
      targetPort: 8181
    - port: 8282
      name: protocol
      targetPort: 8282
    - port: 9999
      name: control
      targetPort: 9999
    - port: 9998
      name: metrics
      targetPort: 9998
  selector:
    app: oem-control-plane
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-control-plane-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-control-plane"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-edc-control/{{ .Values.dataspace.bpnOem }}/(management)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane
                port:
                  number: 8181
          - path: /oem-edc-control/{{ .Values.dataspace.bpnOem }}/(api/v1/dsp)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane
                port:
                  number: 8282
          - path: /oem-edc-control/{{ .Values.dataspace.bpnOem }}/(api/check)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane
                port:
                  number: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-control-plane2
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-control-plane: default
spec:
  selector:
    matchLabels:
      app: oem-control-plane2
  template:
    metadata:
      labels:
        app: oem-control-plane2
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
            type: RuntimeDefault
      containers:
        - image: tractusx/edc-controlplane-memory-hashicorp-vault:0.5.0
          imagePullPolicy: Always
          name: oem-control-plane2
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false   
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8080 # API
            - containerPort: 8181 # MANAGEMENT
            - containerPort: 8282 # PROTOCOL
            - containerPort: 9999 # CONTROL
            - containerPort: 9998 # METRICS
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration2.properties
          resources:
           requests:
            cpu: 500m
            memory: 512Mi
           limits:
            cpu: 500m
            memory: 512Mi
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8080
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8080
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5          
          volumeMounts:
            - name: control-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: control-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration2.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: control-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
      volumes:
        - name: control-plane-config
          configMap:
            name: oem-control-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-control-plane2
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: api
      targetPort: 8080
    - port: 8181
      name: management
      targetPort: 8181
    - port: 8282
      name: protocol
      targetPort: 8282
    - port: 9999
      name: control
      targetPort: 9999
    - port: 9998
      name: metrics
      targetPort: 9998
  selector:
    app: oem-control-plane2
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-control-plane2-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-control-plane2"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-edc-control2/{{ .Values.dataspace.bpnOem }}/(management)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane2
                port:
                  number: 8181
          - path: /oem-edc-control2/{{ .Values.dataspace.bpnOem }}/(api/v1/dsp)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane2
                port:
                  number: 8282
          - path: /oem-edc-control2/{{ .Values.dataspace.bpnOem }}/(api/check)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-control-plane2
                port:
                  number: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oem-data-plane-config
  namespace: {{ .Values.namespace }}
data:
  configuration.properties: |-
    ###########################################
    # LOCAL EDC AGENT PLANE CONFIG (OEM)
    ###########################################

    ###
    # Chapter General Settings
    ###

    edc.participant.id=BPNL00000003COJN

    ###
    # Chapter Web Server / Ports
    ###

    web.http.default.port=8082
    web.http.default.path=/api
    web.http.public.port=8185
    web.http.public.path=/data
    web.http.callback.port=8187
    web.http.callback.path=/callback
    web.http.control.port=9999
    web.http.control.path=/api/dataplane/control
    
    ###
    # Chapter Security
    ###

    edc.api.auth.key={{ .Values.security.xApiKey }}
    edc.vault.hashicorp.url={{ .Values.security.vaultUrl }}
    edc.vault.hashicorp.token={{ .Values.security.vaultToken }}
    edc.vault.hashicorp.timeout.seconds=30
    edc.vault.hashicorp.health.check.enabled=false
    edc.vault.hashicorp.health.check.standby.ok=false
    edc.vault.hashicorp.api.secret.path=/v1/knowledge
    edc.vault.hashicorp.api.health.check.path=/v1/sys/health
    
    ### 
    # Chapter Trust & Dataspace
    ###

    # We setup a combined validation endpoint for two control planes
    edc.dataplane.token.validation.endpoint=http://oem-data-plane:8082/api/validation
    edc.dataplane.token.validation.endpoints.provider=http://oem-control-plane:9999/control/token
    edc.dataplane.token.validation.endpoints.consumer=http://oem-control-plane2:9999/control/token

    edc.core.retry.retries.max= 0
    cx.agent.controlplane.protocol=http://oem-control-plane2:8282
    cx.agent.controlplane.management=http://oem-control-plane2:8181/management/v2
    cx.agent.controlplane.management.provider=http://oem-control-plane:8181/management/v2
    cx.agent.callback=http://oem-data-plane:8187/callback/endpoint-data-reference
    cx.agent.skill.contract.default=Contract?oem=Skill

    ###
    # Chapter Agent Catalogue
    ###
    cx.agent.asset.file=dataspace.ttl
    cx.agent.dataspace.synchronization=60000
    cx.agent.dataspace.remotes=http://oem-control-plane:8282,https://{{ .Values.ingress.host}}/tiera-edc-control/BPNL00000003CPIY
  opentelemetry.properties: |-
    otel.javaagent.enabled=false
    otel.javaagent.debug=false
  logging.properties: |-
    .level=FINE
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n
  agent.ttl: |-
  {{- .Files.Get .Values.dataspace.config | nindent 4 }}
  dataspace.ttl: |-
  {{- .Files.Get .Values.dataspace.ontology | nindent 4 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oem-data-plane
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/oem-data-plane: default
spec:
  selector:
    matchLabels:
      app: oem-data-plane
  template:
    metadata:
      labels:
        app: oem-data-plane
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10100
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - image: ghcr.io/catenax-ng/product-agents-edc/agentplane-hashicorp:1.9.5-SNAPSHOT
          imagePullPolicy: Always
          name: oem-data-plane
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          ports:
            - containerPort: 8082 # API
            - containerPort: 8185 # PUBLIC
            - containerPort: 8187 # AGREEMENT CALLBACK
            - containerPort: 9999 # CONTROL
          env:
            - name:  EDC_FS_CONFIG
              value: /connector-config/configuration.properties
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 500m
              memory: 512Mi
          startupProbe:
            failureThreshold: 17
            httpGet:
              path: /api/check/startup
              port: 8082
              scheme: HTTP
            initialDelaySeconds: 90
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 4
            httpGet:
              path: /api/check/liveness
              port: 8082
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /api/check/readiness
              port: 8082
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - name: oem-data-plane-config
              mountPath: /connector-config
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/configuration.properties
              subPath: configuration.properties
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/opentelemetry.properties
              subPath: opentelemetry.properties
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/logging.properties
              subPath: logging.properties
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/agent.ttl
              subPath: agent.ttl
              readOnly: true
            - name: oem-data-plane-config
              mountPath: /app/dataspace.ttl
              subPath: dataspace.ttl
              readOnly: true
      volumes:
        - name: oem-data-plane-config
          configMap:
            name: oem-data-plane-config
---
apiVersion: v1
kind: Service
metadata:
  name: oem-data-plane
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8082
      name: api
      targetPort: 8082
    - port: 8185
      name: public
      targetPort: 8185
    - port: 8186
      name: callback
      targetPort: 8187
    - port: 9999
      name: control
      targetPort: 9999
  selector:
    app: oem-data-plane
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: oem-data-plane-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1$2
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/oem-data-plane"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /oem-edc-data/{{ .Values.dataspace.bpnOem }}/(data)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-data-plane
                port:
                  number: 8185
          - path: /oem-edc-data/{{ .Values.dataspace.bpnOem }}/(api)(.*)
            pathType: Prefix
            backend:
              service:
                name: oem-data-plane
                port:
                  number: 8082

