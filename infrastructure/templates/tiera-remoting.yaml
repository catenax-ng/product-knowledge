apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-backend
  namespace: {{ .Values.namespace }}
  annotations:
    container.apparmor.security.beta.kubernetes.io/tiera-backend: default
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: service-backend
  template:
    metadata:
      labels:
        app: service-backend
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10000
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
           type: RuntimeDefault
      containers:
        - name: tiera-backend
          image: ghcr.io/catenax-ng/product-knowledge/prognosis:{{ .Values.version }}
          imagePullPolicy: Always
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
          ports:
            - containerPort: 5005 # API
          resources:
           requests:
            cpu: 500m
            memory: 256Mi
           limits:
            cpu: 500m
            memory: 256Mi
          startupProbe:
            failureThreshold: 18
            httpGet:
              path: /docs
              port: 5005
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /docs
              port: 5005
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /docs
              port: 5005
              scheme: HTTP
            periodSeconds: 300
            successThreshold: 1
            timeoutSeconds: 5        
          env:
          volumeMounts:
      volumes:
---
apiVersion: v1
kind: Service
metadata:
  name: service-backend
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 5005
      targetPort: 5005
  selector:
    app: service-backend
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tiera-backend-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/tiera-backend"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /tiera-backend/?(.*)
            pathType: Prefix
            backend:
              service:
                name: service-backend
                port:
                  number: 5005
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tiera-remoting-agent-config
  namespace: {{ .Values.namespace }}
data:
  health.ttl: |-
{{- .Files.Get "tiera/resources/rdf4j/repositories/health/config.ttl" | nindent 4 }}
  prognosis.ttl: |-
{{- .Files.Get "tiera/resources/rdf4j/repositories/prognosis/config.ttl" | nindent 4 }}
  rul.ttl: |-
{{- .Files.Get "tiera/resources/rdf4j/repositories/rul/config.ttl" | nindent 4 }}
  logback.xml: |-
{{- .Files.Get "tiera/resources/rdf4j/conf/logback.xml" | nindent 4 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tiera-remoting-agent
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: tiera-remoting-agent
  template:
    metadata:
      labels:
        app: tiera-remoting-agent
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsUser: 10001
        runAsGroup: 30000
        fsGroup: 30000
        seccompProfile:
           type: RuntimeDefault
      containers:
        - name: tiera-remoting-agent
          image: tractusx/knowledge-agents/remoting-agent:1.12.19
          imagePullPolicy: Always
          securityContext:
            capabilities:
              drop:
                - all
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
          ports:
            - containerPort: 8081 # API
          resources:
           requests:
            cpu: 500m
            memory: 512Mi
           limits:
            cpu: 500m
            memory: 512Mi
          startupProbe:
            failureThreshold: 18
            httpGet:
              path: /rdf4j-server/protocol
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /rdf4j-server/protocol
              port: 8081
              scheme: HTTP
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /rdf4j-server/protocol
              port: 8081
              scheme: HTTP
            periodSeconds: 300
            successThreshold: 1
            timeoutSeconds: 5        
          env:
            - name: JAVA_TOOL_OPTIONS
              value: "" #"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8090"
          volumeMounts:
            - name: tiera-remoting-agent-config
              mountPath: /var/rdf4j/server/repositories/prognosis/config.ttl
              subPath: prognosis.ttl
              readOnly: true
            - name: tiera-remoting-agent-config
              mountPath: /var/rdf4j/server/repositories/health/config.ttl
              subPath: health.ttl
              readOnly: true
            - name: tiera-remoting-agent-config
              mountPath: /var/rdf4j/server/repositories/rul/config.ttl
              subPath: rul.ttl
              readOnly: true
            - name: tiera-remoting-agent-config
              mountPath: /var/rdf4j/server/conf/logback.xml
              subPath: logback.xml
              readOnly: true
      volumes:
        - name: tiera-remoting-agent-config
          configMap:
            name: tiera-remoting-agent-config
---
apiVersion: v1
kind: Service
metadata:
  name: tiera-remoting-agent
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: 8081
  selector:
    app: tiera-remoting-agent
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tiera-remoting-agent-ingress
  namespace: {{ .Values.namespace }}
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }}
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://knowledge.dev.demo.catena-x.net, http://localhost:3000"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, PUT, POST, DELETE, PATCH, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Host,DNT,X-Api-Key,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    nginx.ingress.kubernetes.io/x-forwarded-prefix: "/tiera-remoting-agent"
    nginx.org/mergeable-ingress-type: minion
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /tiera-remoting-agent(.*)
            pathType: Prefix
            backend:
              service:
                name: tiera-remoting-agent
                port:
                  number: 8081