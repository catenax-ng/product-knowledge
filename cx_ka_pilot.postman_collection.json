{
	"info": {
		"_postman_id": "6a1813a3-766d-42e2-962d-3b340fbba397",
		"name": "Knowledge Agents Pilot",
		"description": "A collection of API calls against various services of the Knowledge Agents Pilot.\n\nAlso contains a special integration test subfolder.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2757771"
	},
	"item": [
		{
			"name": "Dataspace",
			"item": [
				{
					"name": "OEM (Data Providing Agent)",
					"item": [
						{
							"name": "Provisioning Agent (Intern)",
							"item": [
								{
									"name": "Query the Provisioning Agent",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nSELECT ?reason ?code ?description ?version ?partend ?partcat ?partclass WHERE {\n  # Select Business Partner\n  ?Oem cx:BPNL \"BPNL00000003COJN\".\n\n  # Search for Trouble Codes of the Business Partner\n  # related to a cause in the \"Kabelbaum\"\n  ?Dtc rdf:type cx-diag:DTC.\n  ?Dtc cx:provisionedBy ?Oem.\n  ?Dtc cx-diag:PossibleCauses ?reason.\n  FILTER contains(?reason,\"Kabelbaum\").\n  ?Dtc cx-diag:Code ?code.\n  ?Dtc cx-diag:Description ?description.\n  ?Dtc cx-diag:Version ?version.\n\n  # Navigate to the affected parts\n  # and show only parts with a classification \"Powertrain\"\n  ?Dtc cx-diag:affects ?Part.\n  ?Part cx-diag:Category ?partcat.\n  ?Part cx-diag:EnDenomination ?partend.\n  ?Part cx-diag:Classification ?partclass.\n  FILTER contains(?partclass,'Powertrain').\n\n} LIMIT 40\n"
										},
										"url": {
											"raw": "{{provisioningAgent}}/sparql",
											"host": [
												"{{provisioningAgent}}"
											],
											"path": [
												"sparql"
											]
										}
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Data Provisioning Agents Directly Which Sits upon some Data Source.",
							"auth": {
								"type": "basic",
								"basic": [
									{
										"key": "password",
										"value": "{{oemPassword}}",
										"type": "string"
									},
									{
										"key": "username",
										"value": "{{oemUser}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "EDC (Intern)",
							"item": [
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/api/check/:stage",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"api",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Data Graph Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n      \"asset:prop:name\": \"Diagnostic Trouble Code Catalogue Version 2022\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:policy-id\": \"research\",\n      \"asset:prop:cx:requesttype\": \"application/sparql\",\n      \"asset:prop:cx:apitype\": \"application/knowledge-agent-query\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:shapesGraph\": \"@prefix : <urn:cx:Graph:oem:Diagnosis2022> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DTC ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Affects ;\\n        sh:class OemDiagnosedParts ;\\n    ] ;\\n\\nOemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"baseUrl\": \"http://oem-provider-agent:8080/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "Create Graph Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"oemPolicy\",\n  \"policy\": {\n    \"target\": \"urn:cx:Graph:oem:.*\",\n    \"permissions\": [\n        {\n            \"target\": \"urn:cx:Graph:oem:Diagnosis.*\",\n            \"action\": {\n                \"type\": \"USE\"\n            },\n            \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "Create Graph Contract Definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\":\"oemOffer\",\n  \"accessPolicyId\": \"oemPolicy\",\n  \"contractPolicyId\": \"oemPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Graph:oem:.*\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
													"        contenttypes.map(function(contenttype) {",
													"            var contenttypespec=contenttype.split(\";\");",
													"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "List Contract Definitions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "List Contract Agreements",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/contractagreements",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractagreements"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Show Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/catalog?providerUrl={{oemEdcIds}}/api/v1/ids/data",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "http://connector.cx-rel.edc.aws.bmw.cloud:8282/BPNL00000003AYRE/api/v1/ids/data",
													"disabled": true
												},
												{
													"key": "providerUrl",
													"value": "{{oemEdcIds}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								}
							],
							"description": "A Collection of Calls against the EDC control and data planes sitting on top of a data provisioner.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "A Collection of API Calls Against the Data Provisioning Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "TierA (Function Remoting Agent)",
					"item": [
						{
							"name": "Remoting Agent (Intern)",
							"item": [
								{
									"name": "Test the Public Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.agify.io?name=Schorsch",
											"protocol": "https",
											"host": [
												"api",
												"agify",
												"io"
											],
											"query": [
												{
													"key": "name",
													"value": "Schorsch",
													"description": "Prognosis Input, here a primitve string"
												}
											]
										},
										"description": "An example of a public prognosis service."
									},
									"response": []
								},
								{
									"name": "Check the Backend Service",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{tierABackend}}/docs",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"docs"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Test the Backend Service",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "load_collective_file",
													"type": "file",
													"src": "/Users/A29078924/Downloads/Fzg1_LCollective.json"
												}
											]
										},
										"url": {
											"raw": "{{tierABackend}}/api/rul",
											"host": [
												"{{tierABackend}}"
											],
											"path": [
												"api",
												"rul"
											]
										},
										"description": "Invocation of the actual Lifetime Prognosis Service"
									},
									"response": []
								},
								{
									"name": "Check the Remoting Agent",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{remotingAgent}}/protocol",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"protocol"
											]
										},
										"description": "This endpoint should return the number of supported protocols and can be used as a healthcheck."
									},
									"response": []
								},
								{
									"name": "Query Public/Simple Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX prognosis: <https://github.com/catenax-ng/product-knowledge/ontology/prognosis.ttl#>\n\nSELECT ?invocation ?prediction ?support\nWHERE { \n  ?invocation a prognosis:Prognosis;         \n              prognosis:name \"Schorsch\"^^xsd:string; \n              prognosis:prediction ?prediction; \n              prognosis:support ?support; \n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query against a simple invocation with only primitive inputs and outputs."
									},
									"response": []
								},
								{
									"name": "Query Complex/Backend Binding",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?invocation ?distance ?time\nWHERE { \n  ?invocation a cx-lifetime:LifetimePrognosis;\n              cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^xsd:string; \n              cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^xsd:string; \n              cx-lifetime:loadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^xsd:string; \n              cx-lifetime:loadCollectiveComponent \"\\\"GearOil\\\"\"^^xsd:string; \n              cx-lifetime:loadCollectiveMileage \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^xsd:string; \n              cx-lifetime:loadCollectiveRegistrationDate \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^xsd:string; \n              cx-lifetime:remainingDistance ?distance; \n              cx-lifetime:remainingTime ?time.\n}"
										},
										"url": {
											"raw": "{{remotingAgent}}/repositories/prognosis",
											"host": [
												"{{remotingAgent}}"
											],
											"path": [
												"repositories",
												"prognosis"
											]
										},
										"description": "A sample SparQL query with a more complex binding where the input is a json document."
									},
									"response": []
								}
							],
							"description": "A Collection of API Calls Against the Function Remoting Agents Directly Which Sits upon some REST Service.",
							"auth": {
								"type": "noauth"
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "EDC (Intern)",
							"item": [
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/api/check/:stage",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"api",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										},
										"description": "Health Check Interface of EDC planes"
									},
									"response": []
								},
								{
									"name": "Create Function Graph Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:LifetimeGearbox\",\n      \"asset:prop:name\": \"Lifetime Prognosis Service for Gearboxes\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:policy-id\": \"gobang\",\n      \"asset:prop:cx:requesttype\": \"application/sparql\",\n      \"asset:prop:cx:apitype\": \"application/knowledge-agent-query\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:shapesGraph\": \"@prefix : <urn:cx:Graph:tierA:LifetimeGearbox> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n :Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-lifetime:LifetimePrognosis ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003CPIY> ].\\n\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"baseUrl\": \"http://tiera-remoting-agent:8081/rdf4j-server/repositories/prognosis\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph asset."
									},
									"response": []
								},
								{
									"name": "Create Graph Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"tierAPolicy\",\n  \"target\": \"urn:cx:Graph:tierA:.*\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Graph:tierA:.*\",\n        \"action\": {\n        \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a graph policy."
									},
									"response": []
								},
								{
									"name": "Create Graph Contract Definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\":\"tierAOffer\",\n  \"accessPolicyId\": \"tierAPolicy\",\n  \"contractPolicyId\": \"tierAPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Graph:tierA:.*\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a contract."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
													"        contenttypes.map(function(contenttype) {",
													"            var contenttypespec=contenttype.split(\";\");",
													"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Show Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/catalog?providerUrl={{oemEdcControl}}/api/v1/ids/data",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "http://connector.cx-rel.edc.aws.bmw.cloud:8282/BPNL00000003AYRE/api/v1/ids/data",
													"disabled": true
												},
												{
													"key": "providerUrl",
													"value": "{{oemEdcControl}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								}
							],
							"description": "A Collection of Calls Against the EDC control and dataplane sitting on top of the remoting backend."
						}
					],
					"description": "A Collection of API Calls Against the Function Remoting Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Consumer (Federating Agent)",
					"item": [
						{
							"name": "EDC (intern)",
							"item": [
								{
									"name": "Check Probe",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Check was successful\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.expect(pm.response.json()).to.have.property(\"isSystemHealthy\",true);",
													"    pm.expect(pm.response.json()).to.have.property(\"componentResults\");",
													"    pm.expect(pm.response.json().componentResults).to.have.length.greaterThan(0);",
													"    pm.response.json().componentResults.map( function(component) {",
													"        pm.expect(component).to.have.property(\"isHealthy\",true);",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/api/check/:stage",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"api",
												"check",
												":stage"
											],
											"variable": [
												{
													"key": "stage",
													"value": "startup",
													"description": "You may choose startup, readiness or liveness"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Skill Asset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:LifetimeGearbox\",\n      \"asset:prop:name\": \"Lifetime Skill for Vehicles\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:requesttype\": \"application/sparql-skill\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT ?reason ?code ?description ?version ?partend ?partcat ?partclass WHERE {\\n  # Select Business Partner\\n  ?Oem cx:BPNL \\\"BPNL00000003COJN\\\".\\n\\n  # Search for Trouble Codes of the Business Partner\\n  # related to a cause in the \\\"Kabelbaum\\\"\\n  ?Dtc rdf:type cx-diag:DTC.\\n  ?Dtc cx:provisionedBy ?Oem.\\n  ?Dtc cx-diag:PossibleCauses ?reason.\\n  FILTER contains(?reason,\\\"Kabelbaum\\\").\\n  ?Dtc cx-diag:Code ?code.\\n  ?Dtc cx-diag:Description ?description.\\n  ?Dtc cx-diag:Version ?version.\\n\\n  # Navigate to the affected parts\\n  # and show only parts with a classification \\\"Powertrain\\\"\\n  ?Dtc cx-diag:affects ?Part.\\n  ?Part cx-diag:Category ?partcat.\\n  ?Part cx-diag:EnDenomination ?partend.\\n  ?Part cx-diag:Classification ?partclass.\\n  FILTER contains(?partclass,'Powertrain').\\n\\n}\\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill asset."
									},
									"response": []
								},
								{
									"name": "Create Skill Policy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"consumerPolicy\",\n  \"policy\": {\n      \"target\": \"urn:cx:Skill:consumer.*\",\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Skill:consumer:Lifetime.*\",\n        \"action\": {\n            \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill policy."
									},
									"response": []
								},
								{
									"name": "Create Skill Contract Definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Creation/Existance was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([204,409]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\":\"consumerOffer\",\n  \"accessPolicyId\": \"consumerPolicy\",\n  \"contractPolicyId\": \"consumerPolicy\",\n  \"criteria\": [ {\n      \"operandLeft\": \"asset:prop:id\",\n      \"operator\":\"~\",\n      \"operandRight\":\"urn:cx:Skill:consumer:.*\"\n  }]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{oemEdcControl}}/data/contractdefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"contractdefinitions"
											]
										},
										"description": "Calls the datamanagement API in order to create a skill contract."
									},
									"response": []
								},
								{
									"name": "List Assets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(asset) {",
													"        pm.expect(asset).to.have.property(\"properties\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"        var contenttypes=asset.properties[\"asset:prop:contenttype\"].split(\",\").map(function(type) { return type.trim();});",
													"        contenttypes.map(function(contenttype) {",
													"            var contenttypespec=contenttype.split(\";\");",
													"            pm.expect(contenttypespec[0]).oneOf([\"application/json\",\"application/xml\",\"application/cx-skill\"]);",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/assets",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"assets"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the assets."
									},
									"response": []
								},
								{
									"name": "List Policies",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Asset listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.length.gt(0);",
													"    pm.response.json().map(function(policy) {",
													"        pm.expect(policy).to.have.property(\"uid\");",
													"        pm.expect(policy).to.have.property(\"permissions\");",
													"        pm.expect(policy.permissions).to.have.length.gte(0);",
													"        policy.permissions.map(function(permission) {",
													"            pm.expect(permission).to.have.property(\"edctype\",\"dataspaceconnector:permission\");",
													"            pm.expect(permission).to.have.property(\"target\");",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/policydefinitions",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"policydefinitions"
											]
										},
										"description": "Uses the datamanagement API to get an (internal) list of the policies."
									},
									"response": []
								},
								{
									"name": "Show Catalogue",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Catalogue listing was successful\", function () {",
													"    pm.expect(pm.response.code).oneOf([200]);",
													"    pm.expect(pm.response.json()).to.have.property(\"id\");",
													"    pm.expect(pm.response.json()).to.have.property(\"contractOffers\");",
													"    pm.expect(pm.response.json().contractOffers).to.have.length.gte(0);",
													"    pm.response.json().contractOffers.map(function(contractOffer) {",
													"        pm.expect(contractOffer).to.have.property(\"id\");",
													"        pm.expect(contractOffer).to.have.property(\"policy\");",
													"        pm.expect(contractOffer).to.have.property(\"asset\");",
													"        pm.expect(contractOffer.asset).to.have.property(\"properties\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:id\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:name\");",
													"        pm.expect(contractOffer.asset.properties).to.have.property(\"asset:prop:contenttype\");",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Api-Key",
												"value": "{{oemEdcApiKey}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{oemEdcControl}}/data/catalog?providerUrl={{oemEdcControl}}/api/v1/ids/data",
											"host": [
												"{{oemEdcControl}}"
											],
											"path": [
												"data",
												"catalog"
											],
											"query": [
												{
													"key": "providerUrl",
													"value": "http://connector.cx-rel.edc.aws.bmw.cloud:8282/BPNL00000003AYRE/api/v1/ids/data",
													"disabled": true
												},
												{
													"key": "providerUrl",
													"value": "{{oemEdcControl}}/api/v1/ids/data"
												}
											]
										},
										"description": "Use the public IDS api to retrieve the business partner view on the catalogue."
									},
									"response": []
								},
								{
									"name": "Perform a Consumer-Local SparQL",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:graph:cx:Dataspace&query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:graph:cx:Dataspace"
												},
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.}"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Perform a Remote SparQL over the Dataspace",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?query=SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 10&asset=https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "query",
													"value": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 10"
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Data)",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "SELECT ?subject ?predicate ?object WHERE { ?subject ?predicate ?object.} LIMIT 10"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:oem:Diagnosis2022",
													"disabled": true
												},
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:oem:Diagnosis2022"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Remote SparQL (Function)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true,
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> \nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\n\nSELECT ?invocation ?distance ?time\nWHERE { \n  ?invocation a cx-lifetime:LifetimePrognosis;\n              cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^xsd:string; \n              cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^xsd:string; \n              cx-lifetime:loadCollectiveBody \"{     \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^xsd:string; \n              cx-lifetime:loadCollectiveComponent \"\\\"GearOil\\\"\"^^xsd:string; \n              cx-lifetime:loadCollectiveMileage \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^xsd:string; \n              cx-lifetime:loadCollectiveRegistrationDate \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^xsd:string; \n              cx-lifetime:remainingDistance ?distance; \n              cx-lifetime:remainingTime ?time.\n}"
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN%23urn:cx:Graph:tierA:LifetimeGearbox",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "https://knowledge.int.demo.catena-x.net/oem-edc-control/BPNL00000003COJN#urn:cx:Graph:tierA:LifetimeGearbox"
												},
												{
													"key": "asset",
													"value": "http://oem-control-plane:8282%23urn:cx:Graph:tierA:LifetimeGearbox",
													"disabled": true
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on a Local Graph (here: the federated data catalogue)."
									},
									"response": []
								},
								{
									"name": "Post Federated SparQL (Shortcut Over Backends)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n#\n# Sample for a Federated Skill (No Matchmaking) Which\n#  - Uses an OEM connector/agent to infer diagnosis data \n#  - Feeds this data into a Tier A connector/agent to perform a prognosis \n\nSELECT ?vin ?troubleCode ?description ?partProg ?distance ?time WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    # these would be the named URL (or body multi-form) parameters\n    # Since you could use them multiple times, there is a combinatorial difference in \n    # defining them as single variables or as combined tuples\n    VALUES (?vin ?troubleCode) { (\"WVA8984323420333\"^^xsd:string \"P0745\"^^xsd:string) }\n\n    # In this place, there would be a to-be-implemented catalogue logic \n    # (so the default \"asset\" would be the catalogue including the CX ontology)\n    # which maps the VIN via regular expressions to the right \n    # business partner and connector\n    # Currently, we chose even not the connector, but the backend directly\n    VALUES (?oemBpn ?oemConnector) { (\"BPNL00000003COJN\"^^xsd:string <http://{{oemProviderAgent}}:8080/sparql>) }\n\n    # Now we are jumping into the OEM\n    SERVICE ?oemConnector { \n        # Select Business Partner Node\n        ?Oem cx:BPNL ?oemBpn.\n\n        # Unless we have vehicle master data, we directly bind the variables\n        VALUES (?mileage ?registrationDate) { (\n            \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^xsd:string\n            \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^xsd:string\n        )}\n\n        # Search for troubled parts to forecast\n        ?Dtc rdf:type cx-diag:DTC;\n            cx:provisionedBy ?Oem;\n            cx-diag:PossibleCauses ?reason;\n            cx-diag:Code ?troubleCode;\n            cx-diag:Description ?description.\n        \n        # Unless we have a mapping of diagnosed parts to the prognosed parts\n        VALUES ?partProg { \"\\\"GearOil\\\"\"^^xsd:string }        \n\n        # Next we need to find the appropriate load spectrum associated to the prognosed part\n        VALUES ?loadCollective { \n         \"{ \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^xsd:string\n        }\n\n        # we need to find the right supplier for the trouble part\n        VALUES (?tieraBpn ?tieraConnector) {\n           (\"BPNL00000003CPIY\"^^xsd:string <http://{{tierARemotingAgent}}:8081/rdf4j-server/repositories/prognosis>) \n        }       \n\n        \n    }\n\n    # Now we are jumping into the tiera\n    # Notice that ideally, the OEM agent would perform this\n    # as the consumer will have most likely no agreement/contract\n    # for this purpose this SERVICE section would be nested\n    # into the former section\n    SERVICE ?tieraConnector { \n        ?invocation a cx-lifetime:LifetimePrognosis;\n            # Input from the OEM\n            cx-lifetime:loadCollectiveBody ?loadCollective;\n            cx-lifetime:loadCollectiveComponent ?partProg;\n            cx-lifetime:loadCollectiveMileage ?mileage;\n            cx-lifetime:loadCollectiveRegistrationDate ?registrationDate;\n            # Additional info from the Tiera about its measurements\n            cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^xsd:string; \n            cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^xsd:string; \n            # the actual prognosis output\n            cx-lifetime:remainingDistance ?distance; \n            cx-lifetime:remainingTime ?time.\n    }\n\n\n}\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Post Federated SparQL (over Dataspace)",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n#\n# Sample for a Federated Skill (No Matchmaking) Which\n#  - Uses an OEM connector/agent to infer diagnosis data \n#  - Feeds this data into a Tier A connector/agent to perform a prognosis \n\nSELECT ?vin ?troubleCode ?description ?partProg ?distance ?time WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    # these would be the named URL (or body multi-form) parameters\n    # Since you could use them multiple times, there is a combinatorial difference in \n    # defining them as single variables or as combined tuples\n    VALUES (?vin ?troubleCode) { (\"WVA8984323420333\"^^xsd:string \"P0745\"^^xsd:string) }\n\n    # In this place, there would be a to-be-implemented catalogue logic \n    # (so the default \"asset\" would be the catalogue including the CX ontology)\n    # which maps the VIN via regular expressions to the right \n    # business partner and connector\n    # Currently, we chose even not the connector, but the backend directly\n    VALUES (?oemBpn ?oemConnector) { (\"BPNL00000003COJN\"^^xsd:string <edc://oem-control-plane:8282#urn:cx:Graph:oem:Diagnosis2022>) }\n\n    # Now we are jumping into the OEM\n    SERVICE ?oemConnector { \n        # Select Business Partner Node\n        ?Oem cx:BPNL ?oemBpn.\n\n        # Unless we have vehicle master data, we directly bind the variables\n        VALUES (?mileage ?registrationDate) { (\n            \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^xsd:string\n            \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^xsd:string\n        )}\n\n        # Search for troubled parts to forecast\n        ?Dtc rdf:type cx-diag:DTC;\n            cx:provisionedBy ?Oem;\n            cx-diag:PossibleCauses ?reason;\n            cx-diag:Code ?troubleCode;\n            cx-diag:Description ?description.\n        \n        # Unless we have a mapping of diagnosed parts to the prognosed parts\n        VALUES ?partProg { \"\\\"GearOil\\\"\"^^xsd:string }        \n\n        # Next we need to find the appropriate load spectrum associated to the prognosed part\n        VALUES ?loadCollective { \n         \"{ \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^xsd:string\n        }\n\n        # we need to find the right supplier for the trouble part\n        VALUES (?tieraBpn ?tieraConnector) {\n           (\"BPNL00000003CPIY\"^^xsd:string <edc://oem-control-plane:8282#urn:cx:Graph:tierA:LifetimeGearbox>) \n        }       \n    }\n\n    # Now we are jumping into the tiera\n    # Notice that ideally, the OEM agent would perform this\n    # as the consumer will have most likely no agreement/contract\n    # for this purpose this SERVICE section would be nested\n    # into the former section\n    SERVICE ?tieraConnector { \n        ?invocation a cx-lifetime:LifetimePrognosis;\n            # Input from the OEM\n            cx-lifetime:loadCollectiveBody ?loadCollective;\n            cx-lifetime:loadCollectiveComponent ?partProg;\n            cx-lifetime:loadCollectiveMileage ?mileage;\n            cx-lifetime:loadCollectiveRegistrationDate ?registrationDate;\n            # Additional info from the Tiera about its measurements\n            cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^xsd:string; \n            cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^xsd:string; \n            # the actual prognosis output\n            cx-lifetime:remainingDistance ?distance; \n            cx-lifetime:remainingTime ?time.\n    }\n\n\n}\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Perform Some Dynamic Query on Remote Graphs."
									},
									"response": []
								},
								{
									"name": "Register Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n#\n# Sample for a Federated Skill (No Matchmaking) Which\n#  - Uses an OEM connector/agent to infer diagnosis data \n#  - Feeds this data into a Tier A connector/agent to perform a prognosis \n\nSELECT ?vin ?troubleCode ?description ?partProg ?distance ?time WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    # these would be the named URL (or body multi-form) parameters\n    # Since you could use them multiple times, there is a combinatorial difference in \n    # defining them as single variables or as combined tuples\n    VALUES (?vin ?troubleCode) { (\"@vin\"^^xsd:string \"@troubleCode\"^^xsd:string) }\n    \n    # In this place, there would be a to-be-implemented catalogue logic \n    # (so the default \"asset\" would be the catalogue including the CX ontology)\n    # which maps the VIN via regular expressions to the right \n    # business partner and connector\n    # Currently, we chose even not the connector, but the backend directly\n    VALUES (?oemBpn ?oemConnector) { (\"BPNL00000003COJN\"^^xsd:string <http://{{oemProviderAgent}}:8080/sparql>) }\n\n    # Now we are jumping into the OEM\n    SERVICE ?oemConnector { \n        # Select Business Partner Node\n        ?Oem cx:BPNL ?oemBpn.\n\n        # Unless we have vehicle master data, we directly bind the variables\n        VALUES (?mileage ?registrationDate) { (\n            \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^xsd:string\n            \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^xsd:string\n        )}\n\n        # Search for troubled parts to forecast\n        ?Dtc rdf:type cx-diag:DTC;\n            cx:provisionedBy ?Oem;\n            cx-diag:PossibleCauses ?reason;\n            cx-diag:Code ?troubleCode;\n            cx-diag:Description ?description.\n        \n        # Unless we have a mapping of diagnosed parts to the prognosed parts\n        VALUES ?partProg { \"\\\"GearOil\\\"\"^^xsd:string }        \n\n        # Next we need to find the appropriate load spectrum associated to the prognosed part\n        VALUES ?loadCollective { \n         \"{ \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^xsd:string\n        }\n\n        # we need to find the right supplier for the trouble part\n        VALUES (?tieraBpn ?tieraConnector) {\n           (\"BPNL00000003CPIY\"^^xsd:string <http://{{tierARemotingAgent}}:8081/rdf4j-server/repositories/prognosis>) \n        }       \n    }\n\n    # Now we are jumping into the tiera\n    # Notice that ideally, the OEM agent would perform this\n    # as the consumer will have most likely no agreement/contract\n    # for this purpose this SERVICE section would be nested\n    # into the former section\n    SERVICE ?tieraConnector { \n        ?invocation a cx-lifetime:LifetimePrognosis;\n            # Input from the OEM\n            cx-lifetime:loadCollectiveBody ?loadCollective;\n            cx-lifetime:loadCollectiveComponent ?partProg;\n            cx-lifetime:loadCollectiveMileage ?mileage;\n            cx-lifetime:loadCollectiveRegistrationDate ?registrationDate;\n            # Additional info from the Tiera about its measurements\n            cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^xsd:string; \n            cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^xsd:string; \n            # the actual prognosis output\n            cx-lifetime:remainingDistance ?distance; \n            cx-lifetime:remainingTime ?time.\n    }\n}\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Lifetime",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Store a Parameterized Query on Remote Graphs. Not the usage of the @ symbol to introduce a typed embedding of textual URL parameters."
									},
									"response": []
								},
								{
									"name": "Show Skill",
									"protocolProfileBehavior": {
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\nPREFIX cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#> \nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n#\n# Sample for a Federated Skill (No Matchmaking) Which\n#  - Uses an OEM connector/agent to infer diagnosis data \n#  - Feeds this data into a Tier A connector/agent to perform a prognosis \n\nSELECT ?vin ?troubleCode ?description ?partProg ?distance ?time WHERE {\n\n    # Actual input parameters, when used as a predefined skill, \n    # these would be the named URL (or body multi-form) parameters\n    # Since you could use them multiple times, there is a combinatorial difference in \n    # defining them as single variables or as combined tuples\n    VALUES (?vin ?troubleCode) { (\"WVA8984323420333\"^^xsd:string \"P0745\"^^xsd:string) }\n\n    # In this place, there would be a to-be-implemented catalogue logic \n    # (so the default \"asset\" would be the catalogue including the CX ontology)\n    # which maps the VIN via regular expressions to the right \n    # business partner and connector\n    # Currently, we chose even not the connector, but the backend directly\n    VALUES (?oemBpn ?oemConnector) { (\"BPNL00000003COJN\"^^xsd:string <http://{{oemProviderAgent}}:8080/sparql>) }\n\n    # Now we are jumping into the OEM\n    SERVICE ?oemConnector { \n        # Select Business Partner Node\n        ?Oem cx:BPNL ?oemBpn.\n\n        # Unless we have vehicle master data, we directly bind the variables\n        VALUES (?mileage ?registrationDate) { (\n            \"{ \\\"Value\\\": 82563, \\\"Unit\\\": \\\"km\\\" }\"^^xsd:string\n            \"{ \\\"Value\\\": 20171206,  \\\"Unit\\\": \\\"yyyymmdd\\\" }\"^^xsd:string\n        )}\n\n        # Search for troubled parts to forecast\n        ?Dtc rdf:type cx-diag:DTC;\n            cx:provisionedBy ?Oem;\n            cx-diag:PossibleCauses ?reason;\n            cx-diag:Code ?troubleCode;\n            cx-diag:Description ?description.\n        \n        # Unless we have a mapping of diagnosed parts to the prognosed parts\n        VALUES ?partProg { \"\\\"GearOil\\\"\"^^xsd:string }        \n\n        # Next we need to find the appropriate load spectrum associated to the prognosed part\n        VALUES ?loadCollective { \n         \"{ \\\"Temp_Oil-class\\\": [1, 3, 4, 5, 7, 8, 12, 13, 17, 18, 20, 22, 23, 25, 28, 29, 31, 32, 33, 34, 36, 37, 38, 41, 42, 44, 45, 47, 48, 49, 50, 51],  \\\"Counts\\\": [7.234E+01, 2.345E+02, 6.654E+02, 5.983E+01, 4.321E+02, 3.876E+02, 5.567E+01, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+02, 6.098E+02, 7.432E+02, 8.873E+02, 4.738E+01, 6.927E+01, 1.234E+02, 2.345E+02, 3.654E+02, 2.983E+01, 4.321E+01, 3.876E+02, 5.567E+02, 3.4456E+02, 4.556645E+02, 5.678E+01, 4.321E+01, 6.098E+01, 3.432E+02, 1.873E+02, 4.738E+02, 6.927E+02] }\"^^xsd:string\n        }\n\n        # we need to find the right supplier for the trouble part\n        VALUES (?tieraBpn ?tieraConnector) {\n           (\"BPNL00000003CPIY\"^^xsd:string <http://{{tierARemotingAgent}}:8081/rdf4j-server/repositories/prognosis>) \n        }       \n    }\n\n    # Now we are jumping into the tiera\n    # Notice that ideally, the OEM agent would perform this\n    # as the consumer will have most likely no agreement/contract\n    # for this purpose this SERVICE section would be nested\n    # into the former section\n    SERVICE ?tieraConnector { \n        ?invocation a cx-lifetime:LifetimePrognosis;\n            # Input from the OEM\n            cx-lifetime:loadCollectiveBody ?loadCollective;\n            cx-lifetime:loadCollectiveComponent ?partProg;\n            cx-lifetime:loadCollectiveMileage ?mileage;\n            cx-lifetime:loadCollectiveRegistrationDate ?registrationDate;\n            # Additional info from the Tiera about its measurements\n            cx-lifetime:loadCollectiveFile \"{  \\\"Type\\\": \\\"ZF_load_collective\\\", \\\"Version\\\": \\\"1.7\\\"  }\"^^xsd:string; \n            cx-lifetime:loadCollectiveHeader \"{  \\\"CountingMethod\\\": \\\"ZF_TimeAtLevel\\\",    \\\"CountingUnit\\\": \\\"s\\\",    \\\"Channels\\\": [      {        \\\"Name\\\": \\\"Temp_Oil\\\",        \\\"Type\\\": \\\"Load\\\",        \\\"Unit\\\": \\\"degC\\\",        \\\"LowerLimit\\\": -40,        \\\"UpperLimit\\\": 220,        \\\"NumberOfBins\\\": 52      }  ]  }\"^^xsd:string; \n            # the actual prognosis output\n            cx-lifetime:remainingDistance ?distance; \n            cx-lifetime:remainingTime ?time.\n    }\n}\n\n",
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent/skill?asset=urn:cx:Skill:consumer:Lifetime",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent",
												"skill"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill."
									},
									"response": []
								},
								{
									"name": "Execute Skill",
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/sparql-query",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{consumerAgentPlane}}/api/agent?asset=urn:cx:Skill:consumer:Lifetime&(vin=WVA8984323420333&troubleCode=P0746&troubleCode=P0745)&(vin=WVA8984323420334&troubleCode=P0744)",
											"host": [
												"{{consumerAgentPlane}}"
											],
											"path": [
												"api",
												"agent"
											],
											"query": [
												{
													"key": "asset",
													"value": "urn:cx:Skill:consumer:Lifetime"
												},
												{
													"key": "(vin",
													"value": "WVA8984323420333"
												},
												{
													"key": "troubleCode",
													"value": "P0746"
												},
												{
													"key": "troubleCode",
													"value": "P0745)"
												},
												{
													"key": "(vin",
													"value": "WVA8984323420334"
												},
												{
													"key": "troubleCode",
													"value": "P0744)"
												}
											]
										},
										"description": "Uses the Agent Extension of the Dataplane to Invoke a Stored Skill using Parameters. Note the tuple syntax for URL parameters using the \"(\" symbol as the starting character of parameter names to introduce nesting and the \")\" symbol as the ending character in parameter values to close a nested layer."
									},
									"response": []
								}
							],
							"description": "A collection of calls agains the (agent-enabled) EDC control and data plane of the consumer tenant."
						}
					],
					"description": "A Collection of API Calls Against the Consuming and Federation Components of the Dataspace.",
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{oemPassword}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{oemUser}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "A Collection of API Calls Against the Dataspace Components of KA."
		},
		{
			"name": "Integration Tests",
			"item": [
				{
					"name": "1.1 Deregister Existing Oem Graph Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deletion/Non-Existance of Data Graph Asset was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{oemEdcControl}}/data/assets/urn:cx:Graph:oem:Diagnosis2022",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"assets",
								"urn:cx:Graph:oem:Diagnosis2022"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "1.2 Register Oem Data Graph Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation of Data Graph Asset was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:oem:Diagnosis2022\",\n      \"asset:prop:name\": \"Diagnostic Trouble Code Catalogue Version 2022\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:policy-id\": \"research\",\n      \"asset:prop:cx:requesttype\": \"application/sparql\",\n      \"asset:prop:cx:apitype\": \"application/knowledge-agent-query\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:shapesGraph\": \"@prefix : <urn:cx:Graph:oem:Diagnosis2022> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n\\nOemDTC rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DTC ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Version ;\\n        sh:hasValue 0^^xsd:long ;\\n    ] ;\\n  sh:property [\\n        sh:path cx-diag:Affects ;\\n        sh:class OemDiagnosedParts ;\\n    ] ;\\n\\nOemDiagnosedParts rdf:type sh:NodeShape ;\\n  sh:targetClass cx-diag:DiagnosedPart ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003COJN> ;\\n    ] ;\\n\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"baseUrl\": \"http://oem-provider-agent:8080/sparql\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/data/assets",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "1.3 Disable Oem Graph Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deletion/Non-Existance of Oem Policy was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{oemEdcControl}}/data/policydefinitions/oemPolicy",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"policydefinitions",
								"oemPolicy"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph policy."
					},
					"response": []
				},
				{
					"name": "1.4 Enable Oem Graph Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation of Oem Policy was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"oemPolicy\",\n  \"policy\": {\n    \"target\": \"urn:cx:Graph:oem:.*\",\n    \"permissions\": [\n        {\n            \"target\": \"urn:cx:Graph:oem:Diagnosis.*\",\n            \"action\": {\n                \"type\": \"USE\"\n            },\n            \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/data/policydefinitions",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"policydefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph policy."
					},
					"response": []
				},
				{
					"name": "2.1 Deregister Tier1 Function Graph Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deletion/Non-Existance of Function Graph Asset was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{oemEdcControl}}/data/assets/urn:cx:Graph:tierA:LifetimeGearbox",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"assets",
								"urn:cx:Graph:tierA:LifetimeGearbox"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "2.2 Register Tier1 Function Graph Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation of Function Graph Asset was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Graph:tierA:LifetimeGearbox\",\n      \"asset:prop:name\": \"Lifetime Prognosis Service for Gearboxes\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:policy-id\": \"gobang\",\n      \"asset:prop:cx:requesttype\": \"application/sparql\",\n      \"asset:prop:cx:apitype\": \"application/knowledge-agent-query\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:shapesGraph\": \"@prefix : <urn:cx:Graph:tierA:LifetimeGearbox> .\\n@prefix cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#> .\\n@prefix cx-lifetime: <https://github.com/catenax-ng/product-knowledge/ontology/lifetime.ttl#> .\\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n@prefix sh: <http://www.w3.org/ns/shacl#> .\\n :Tier1LifetimePrognosis rdf:type sh:NodeShape ;\\n  sh:targetClass cx-lifetime:LifetimePrognosis ;\\n  sh:property [\\n        sh:path cx:provisionedBy ;\\n        sh:hasValue <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#BusinessPartner/BPNL00000003CPIY> ].\\n\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"baseUrl\": \"http://tiera-remoting-agent:8081/rdf4j-server/repositories/prognosis\",\n      \"type\": \"urn:cx:Protocol:w3c:Http#SPARQL\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"true\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"true\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/data/assets",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph asset."
					},
					"response": []
				},
				{
					"name": "2.3 Disable Tier1 Graph Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deletion/Non-Existance of Tier1 Policy was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{oemEdcControl}}/data/policydefinitions/tierAPolicy",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"policydefinitions",
								"tierAPolicy"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph policy."
					},
					"response": []
				},
				{
					"name": "2.4 EnableTier1 Graph Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"tierAPolicy\",\n  \"target\": \"urn:cx:Graph:tierA:.*\",\n  \"policy\": {\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Graph:tierA:.*\",\n        \"action\": {\n        \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/data/policydefinitions",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"policydefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a graph policy."
					},
					"response": []
				},
				{
					"name": "3.2 Deregister Consumer Skill Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deletion/Non-Existance of Skill Asset was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{oemEdcControl}}/data/assets/urn:cx:Skill:consumer:LifetimeGearbox",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"assets",
								"urn:cx:Skill:consumer:LifetimeGearbox"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill asset."
					},
					"response": []
				},
				{
					"name": "3.2 Register Consumer Skill Asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation/Existance was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"asset\": {\n    \"properties\": {\n      \"asset:prop:id\": \"urn:cx:Skill:consumer:LifetimeGearbox\",\n      \"asset:prop:name\": \"Lifetime Skill for Vehicles\",\n      \"asset:prop:contenttype\": \"application/json, application/xml\",\n      \"asset:prop:cx:ontology\": \"https://github.com/catenax-ng/product-knowledge/ontology#\",\n      \"asset:prop:cx:ontologyVersion\": \"https://github.com/catenax-ng/product-knowledge/tree/main\",\n      \"asset:prop:cx:requesttype\": \"application/sparql-skill\",\n      \"asset:prop:cx:isFederated\": true\n    }\n  },\n  \"dataAddress\": {\n    \"properties\": {\n      \"type\": \"urn:cx:Protocol:w3c:Http#SKILL#SPARQL\",\n      \"query\": \"PREFIX cx: <https://github.com/catenax-ng/product-knowledge/ontology/cx.ttl#>\\nPREFIX cx-diag: <https://github.com/catenax-ng/product-knowledge/ontology/diagnosis.ttl#>\\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT ?reason ?code ?description ?version ?partend ?partcat ?partclass WHERE {\\n  # Select Business Partner\\n  ?Oem cx:BPNL \\\"BPNL00000003COJN\\\".\\n\\n  # Search for Trouble Codes of the Business Partner\\n  # related to a cause in the \\\"Kabelbaum\\\"\\n  ?Dtc rdf:type cx-diag:DTC.\\n  ?Dtc cx:provisionedBy ?Oem.\\n  ?Dtc cx-diag:PossibleCauses ?reason.\\n  FILTER contains(?reason,\\\"Kabelbaum\\\").\\n  ?Dtc cx-diag:Code ?code.\\n  ?Dtc cx-diag:Description ?description.\\n  ?Dtc cx-diag:Version ?version.\\n\\n  # Navigate to the affected parts\\n  # and show only parts with a classification \\\"Powertrain\\\"\\n  ?Dtc cx-diag:affects ?Part.\\n  ?Part cx-diag:Category ?partcat.\\n  ?Part cx-diag:EnDenomination ?partend.\\n  ?Part cx-diag:Classification ?partclass.\\n  FILTER contains(?partclass,'Powertrain').\\n\\n}\\n\",\n      \"proxyPath\": \"false\",\n      \"proxyMethod\": \"false\",\n      \"proxyQueryParams\": \"true\",\n      \"proxyBody\": \"false\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/data/assets",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"assets"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill asset."
					},
					"response": []
				},
				{
					"name": "3.4 Disable Consumer Skill Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Deletion/Non-Existance of Consumer Policy was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204,404]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{oemEdcControl}}/data/policydefinitions/consumerPolicy",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"policydefinitions",
								"consumerPolicy"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill policy."
					},
					"response": []
				},
				{
					"name": "3.4 Enable Consumer Skill Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Creation of Consumer Policy was successful\", function () {",
									"    pm.expect(pm.response.code).oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the X-Api-Key header generated by Postman.",
								"key": "X-Api-Key",
								"value": "{{oemEdcApiKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"consumerPolicy\",\n  \"policy\": {\n      \"target\": \"urn:cx:Skill:consumer.*\",\n      \"permissions\": [\n        {\n        \"target\": \"urn:cx:Skill:consumer:Lifetime.*\",\n        \"action\": {\n            \"type\": \"USE\"\n        },\n        \"edctype\": \"dataspaceconnector:permission\"\n        }\n    ],\n    \"@type\": {\n        \"@policytype\": \"set\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{oemEdcControl}}/data/policydefinitions",
							"host": [
								"{{oemEdcControl}}"
							],
							"path": [
								"data",
								"policydefinitions"
							]
						},
						"description": "Calls the datamanagement API in order to create a skill policy."
					},
					"response": []
				}
			]
		}
	]
}